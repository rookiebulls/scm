{
  "list-all-approver-users-for-a-media": {
    "path": "/api/rest/approvalStatus/{id}/mediaApprovers",
    "description": "Return one or more media approver user's information.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 21,
        "name": "id",
        "description": "ID of the media",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "list-all-approver-users-for-a-message": {
    "path": "/api/rest/approvalStatus/{id}/messageApprovers",
    "description": "Return one or more message approver user's information.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 37,
        "name": "id",
        "description": "ID of the message",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "list-possible-approval-status-values": {
    "path": "/api/rest/approvalStatus/",
    "description": "Returns list of approval status values.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": null
  },
  "the-the-current-approval-state-for-a-media-or-message": {
    "path": "/api/rest/approvalStatus/{id}/state",
    "description": "Return the approval state for the media or message.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 13,
        "name": "id",
        "description": "ID of the media or message",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": [
      {
        "id": 14,
        "name": "ownerWorkgroupId",
        "description": "Owner workgroup ID.<p><p>This is an optional parameter. If you leave out this ID, the server will use workgroup ID currently assigned to the media or message.",
        "datatype": "INTEGER"
      }
    ],
    "queryBody": null
  },
  "get-session": {
    "path": "/api/rest/auth/get",
    "description": "Returns session information. The server return response Code 401 (Unauthorized) if the user hasn't logon.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": null
  },
  "login-to-content-manager": {
    "path": "/api/rest/auth/login",
    "description": "Login to Content Manager.",
    "operation": "POST",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": "/*LoginasjohnwithmySecretPassword*/{username:john,password:mySecretPassword}/*Logintonetwork-id3asjohnwithmySecretPassword*/{username:john,password:mySecretPassword,networkId:3rememberMe:true}"
  },
  "logout": {
    "path": "/api/rest/auth/logout",
    "description": "Logout of Content Manager.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": [
      {
        "id": 270,
        "name": "token",
        "description": "The web service authentication token.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "ping-server": {
    "path": "/api/rest/auth/ping",
    "description": "Ping server. <p><p>Don't forget to pass on token.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": null
  },
  "request-public-key": {
    "path": "/api/rest/auth/key",
    "description": "Request public key for Hellman Diffie encryption. The key is only valid for one minute.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": null
  },
  "secure-login-to-content-manager": {
    "path": "/api/rest/auth/secure",
    "description": "Login to Content Manager using encrypted password ans username.<p>",
    "operation": "POST",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": "/*LoginasjohnwithmySecretPassword*/{username:<encrypted>,password:<encrypted>,key:<public-key>}"
  },
  "switch-network": {
    "path": "/api/rest/auth/switchNetwork/{networkId}",
    "description": "Allow the user to switch network.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 392,
        "name": "networkId",
        "description": "ID of the network to switch. See notes for more information.",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "create-category": {
    "path": "/api/rest/categories/",
    "description": "Create new category.<p><p>Here are a few samples of request body for creating new category.<ul><li>Create a basic category:</li></ul><pre class='prettyprint'>{name: 'Basic Category',description: 'A demo for basic category'}</pre><ul><li>Create a sub-category. Assuming the parent category <i>ID</i> is 1.</li></ul><pre class='prettyprint'>{name : 'Demo sub-category',description : 'This sub-category.',parentId : 1}</pre><ul><li>Create a category with two children/sub-categories.</li></ul><pre class='prettyprint'>{name : 'Demo category with children.',description : 'This sub-category with two children categories.',children : [{name : 'Child 1',description : 'Demo sub-category 1.'},{name : 'Child 2',description : 'Demo sub-category 2.'}]}</pre>",
    "operation": "POST",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": {
      "name": "Basiccategory",
      "description": "Democategory"
    }
  },
  "delete-category-by-id": {
    "path": "/api/rest/categories/{id}",
    "description": "Delete category by id.",
    "operation": "DELETE",
    "pathParameters": [
      {
        "id": 407,
        "name": "id",
        "description": "ID of the category to be deleted",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "find-category-by-id": {
    "path": "/api/rest/categories/{id}",
    "description": "Returns information about the category(variable).",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 404,
        "name": "id",
        "description": "ID of the category to be fetched",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": [
      {
        "id": 405,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "get-usage-for-category": {
    "path": "/api/rest/categories/usage",
    "description": "Returns counts of messages, medias, and templates using category items specified in parameters.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": [
      {
        "id": 454,
        "name": "ids",
        "description": "Comma separated list of categorie's ids for which usage should be calculated.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "list-categories": {
    "path": "/api/rest/categories/",
    "description": "Returns one or more category's information.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": [
      {
        "id": 433,
        "name": "limit",
        "description": "Limit search result",
        "defaultValue": "10",
        "datatype": "INTEGER"
      },
      {
        "id": 434,
        "name": "offset",
        "description": "Offset is the first index to perform the search. Use this for paging.",
        "defaultValue": "0",
        "datatype": "INTEGER"
      },
      {
        "id": 435,
        "name": "sort",
        "description": "Comma separated list of fields to sort by. Use - sign (minus sign) to identify the column should be sort by descending.You can use + sign to indicate ascending sort, but remember you need to URL encode the + sign. To avoid URL encoding issue, just leave out the + sign.",
        "defaultValue": "name",
        "datatype": "STRING"
      },
      {
        "id": 436,
        "name": "filters",
        "description": "One or more filter can be apply with following comparator:<b>eq</b>, <b>ne</b>, <b>ge</b>, <b>le</b>, <b>gt</b>, <b>lt</b>, <b>in</b> and <b>like</b>.<p><p>",
        "sample": "{'name' : {'values':['test%', '%xmas%'], comparator : 'like'}}",
        "datatype": "STRING"
      },
      {
        "id": 437,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      },
      {
        "id": 438,
        "name": "search",
        "description": "A string that the user wants to search for.The system will search for category items with names or descriptions containing that string.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "update-single-category": {
    "path": "/api/rest/categories/{id}",
    "description": "Update category.<p><p>This an example of how to update name and description of a category.<p><p><pre class='prettyprint linenums'>   {name : 'New category name',description : 'New description goes here.'}</pre>",
    "operation": "PUT",
    "pathParameters": [
      {
        "id": 448,
        "name": "id",
        "description": "ID of the category to be updated",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": {
      "description": "Democategory.",
      "name": "Basiccategory"
    }
  },
  "create-a-channel": {
    "path": "/api/rest/channels/",
    "description": "Create new channel.<p><p>Here are a few samples of request body for creating new channel.<ul><li>Create a basic channel:</li></ul>The server will create a basic channel and assign frameset <i>Fullscreen 1024x768</i> to it. If the frameset doesn't exist, the server will assign the first found frameset to the channel. If no frameset is found at all, a new frameset <i>Fullscreen 1024x768</i> will be created for you.<pre class='prettyprint'>{name: 'Basic Channel',description: 'A demo for basic channel'}</pre><ul><li>Create a channel from an existing frameset where <i>ID</i> is 1.</li></ul><pre class='prettyprint'>{name : 'Channel with existing frameset',description : 'This channel was created from an existing frameset.',frameset : {id : 1}}</pre><ul><li>Create a channel with a new frameset and two frames.</li></ul><pre class='prettyprint'>{name : 'Channel with new frameset and 2 frames.',description : 'This channel was created with new frameset.',frameset : {name : 'Demo frameset',width : 1024,height : 768,frames : [{name : 'Main frame', left : 0, top : 0, width : 1024, height : 640},{name : 'Bottom Crawl', left : 0, top : 640, width : 1024, height : 128, color : '#8fbbe8'}]}}</pre>",
    "operation": "POST",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": {
      "name": "Mychannel",
      "description": "ChannelforScala"
    }
  },
  "delete-channel-by-filters-(not-implemented)": {
    "path": "/api/rest/channels/",
    "description": "Delete channel by filters.",
    "operation": "DELETE",
    "pathParameters": null,
    "queryParameters": [
      {
        "id": 721,
        "name": "q",
        "description": "NOT IMPLEMENTED",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "delete-channel-by-id": {
    "path": "/api/rest/channels/{id}",
    "description": "Delete channel by id. If you want to delete more than one channel, you can use delete channel by filters service.",
    "operation": "DELETE",
    "pathParameters": [
      {
        "id": 723,
        "name": "id",
        "description": "ID of the channel to be deleted",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "duplicate-the-channel": {
    "path": "/api/rest/channels/{id}/duplicate",
    "description": "Duplicate the channel.<p><p>",
    "operation": "POST",
    "pathParameters": [
      {
        "id": 2880,
        "name": "id",
        "description": "ID of the channel to be duplicated",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": {
      "name": "duplicatechannelname"
    }
  },
  "find-channel-by-id": {
    "path": "/api/rest/channels/{id}",
    "description": "Returns information about the channel.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 718,
        "name": "id",
        "description": "ID of the channel to be fetched",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": [
      {
        "id": 719,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "find-timeslots-for-given-input-criteria": {
    "path": "/api/rest/channels/{id}/frames/{frameId}/timeslots",
    "description": "Returns the list of timeslots. <p><p><b>Note:</b> 'fromDate' and 'toDate' should be in the format <b>'yyyy-MM-dd'</b>.If only 'fromDate' is passed then 'toDate' will be taken as 7 days after the  'fromdate'.If both 'fromDate' and 'toDate' are not passed or only 'toDate' is passed then year and week number will be taken into consideration.If year is not given, the server will use current year. If week is not given, the server will use first week of the year.If all query parameters passed, then 'fromDate' and 'toDate' will be taken into consideration for fetching timeslots instead of week number and year.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 1847,
        "name": "id",
        "description": "The ID of the channel for which to retrieve timeslots.",
        "datatype": "INTEGER"
      },
      {
        "id": 1848,
        "name": "frameId",
        "description": "The ID of the frame for which to retrieve timeslots.",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": [
      {
        "id": 1849,
        "name": "fromDate",
        "description": "Decides from which date timeslots should be fetched  (format : <b> 'yyyy-MM-dd' </b>). ",
        "datatype": "STRING"
      },
      {
        "id": 1850,
        "name": "toDate",
        "description": "Decides till which date timeslots should be fetched  (format : <b> 'yyyy-MM-dd' </b>). If 'formDate' is passed and 'toDate' is not passed default 'toDate' will be seven days after 'fromDate' ",
        "datatype": "STRING"
      },
      {
        "id": 1851,
        "name": "year",
        "description": "Decides the year for which timeslots should be fetched. <b> This paramter is considered only when 'fromDate' paramter is not passed. </b>",
        "defaultValue": "2015",
        "datatype": "INTEGER"
      },
      {
        "id": 1852,
        "name": "week",
        "description": "<b>DEPRECATED</b><br>Use <i>fromDate</i> and <i>toDate</i>.<p>Decides the week number for which timeslots should be fetched. <b> This paramter is considered only when 'fromDate' paramter is not passed. </b>",
        "defaultValue": "1",
        "datatype": "INTEGER"
      }
    ],
    "queryBody": null
  },
  "get-event-triggers-by-channel-id-and-frame-id-": {
    "path": "/api/rest/channels/{id}/frames/{frameId}/eventtriggers",
    "description": "Returns a list of triggers belonging to the channel and given frame.<p><p><b>Note:</b> A channel's variables is created doesn't mean event-trigger for that variable is created for the given frame. Therefor list of event-triggers for that frame can be empty.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 3056,
        "name": "id",
        "description": "The channel id.",
        "datatype": "INTEGER"
      },
      {
        "id": 3057,
        "name": "frameId",
        "description": "The frame id.",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "get-time-triggers-by-channel-id-and-frame-id-": {
    "path": "/api/rest/channels/{id}/frames/{frameId}/timetriggers",
    "description": " Returns a list of triggers belonging to the channel and given frame.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 3092,
        "name": "id",
        "description": "The channel id.",
        "datatype": "INTEGER"
      },
      {
        "id": 3093,
        "name": "frameId",
        "description": "The frame id.",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "get-non-scheduled-playlist-by-channel-id": {
    "path": "/api/rest/channels/{id}/nonscheduledplaylist",
    "description": "Returns the non-schechuled playlist.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 2076,
        "name": "id",
        "description": "The ID of the channel for which to retrieve the non-scheduled content playlist.",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "list-channels": {
    "path": "/api/rest/channels/",
    "description": "Returns one or more channel's information.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": [
      {
        "id": 1527,
        "name": "limit",
        "description": "Limit search result",
        "defaultValue": "10",
        "datatype": "INTEGER"
      },
      {
        "id": 1528,
        "name": "offset",
        "description": "Offset is the first index to perform the search. Use this for paging.",
        "defaultValue": "0",
        "datatype": "INTEGER"
      },
      {
        "id": 1529,
        "name": "sort",
        "description": "Comma separated list of fields to sort by. Use - sign (minus sign) to identify the column should be sort by descending.You can use + sign to indicate ascending sort, but remember you need to URL encode the + sign. To avoid URL encoding issue, just leave out the + sign.",
        "defaultValue": "name",
        "datatype": "STRING"
      },
      {
        "id": 1530,
        "name": "filters",
        "description": "One or more filter can be apply with following comparator:<b>eq</b>, <b>ne</b>, <b>ge</b>, <b>le</b>, <b>gt</b>, <b>lt</b>, <b>in</b> and <b>like</b>.<p><p>",
        "sample": "{'name' : {'values':['%.png', 'test%', '%xmas%'], comparator : 'like'}}",
        "datatype": "STRING"
      },
      {
        "id": 1531,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      },
      {
        "id": 1532,
        "name": "search",
        "description": "A string that the user wants to search for.The system will search for channel items with names or descriptions containing that string.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "multi-update-channels": {
    "path": "/api/rest/channels/multi/{uuid}",
    "description": "Update one or more channels.",
    "operation": "PUT",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": {
      "uuid": "e5a3564a-f20b-4fde-9ccc-583876ea54bc",
      "item": {
        "description": "AdvertisementChannel."
      }
    }
  },
  "update-a-channel": {
    "path": "/api/rest/channels/{id}",
    "description": "Update existing channel by id.<p><p>Here are a few samples of request body for updating channel.<ul><li>Update a basic channel:</li></ul>The server will create a basic channel and assign frameset <i>Fullscreen 1024x768</i> to it. If the frameset doesn't exist, the server will assign the first found frameset to the channel. If no frameset is found at all, a new frameset <i>Fullscreen 1024x768</i> will be created for you.<pre class='prettyprint'>{name: 'Basic Channel',description: 'A demo for basic channel'}</pre><ul><li>Update a channel from an existing frameset where <i>ID</i> is 1.</li></ul><pre class='prettyprint'>{name : 'Channel with existing frameset',description : 'This channel was created from an existing frameset.',frameset : {id : 1}}</pre>",
    "operation": "PUT",
    "pathParameters": [
      {
        "id": 1817,
        "name": "id",
        "description": "ID of the channel to be updated",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": {
      "name": "Mychannel",
      "description": "ChannelforScala"
    }
  },
  "update-schedules": {
    "path": "/api/rest/channels/{id}/schedules",
    "description": "Update schedules.",
    "operation": "PUT",
    "pathParameters": [
      {
        "id": 2346,
        "name": "id",
        "description": "Id of the channel to be updated",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": {"nonScheduledPlaylist":{"id":"54"},"frames":[{"id":"1","timeslots":[{"id":"1","deleteFlag":"false","recurrencePattern":"WEEKLY","playlist":{"id":"4"},"name":"somename","playFullScreen":"false","weekdays":["WEDNESDAY"],"startDate":"2013-01-01 00:00:00"}],"eventTriggers":[{"id":"1","audioDucking":"true","playlist":{"id":"4"},"itemsToPick":"0","playFullScreen":"false","repeatTriggerResponse":"PLAY_WHILE_ON","variable":{"id":"804"}}],"timeTriggers":[{"id":"1","deleteFlag":"false","itemsToPick":"0","recurrencePattern":"WEEKLY","days":["SUNDAY","MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","SATURDAY"],"playlist":{"id":"4"},"name":"somename","playFullScreen":"false","startDate":"2013-01-01","time":"00:00:00"}]}]}
  },
  "get-dashboard-information.": {
    "path": "/api/rest/dashboard/",
    "description": "Returns dashboard information. This information is dynamic based on user's privilege.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": null
  },
  "update-remminder-for-scala-maintenance.": {
    "path": "/api/rest/dashboard/reminder",
    "description": "Returns status: <p><p><b>done</b> - all done.<p><b>newer</b> - New license available with newer Scala Maintenenace date<p><b>same<b> - Scala Maintenenace date is the same<p><p>Here are a few samples of request body for creating new category.<ul><li>Don't remind for one day:</li></ul><pre class='prettyprint'>{action : 'ONE_DAY'}</pre><ul><li>Not now, remind me later next time I logon.</li></ul><pre class='prettyprint'>{action : 'NOT_NOW'}</pre>",
    "operation": "PUT",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": {
      "action": "CHECK_ONLINE"
    }
  },
  "list-possible-valid-date-status-values": {
    "path": "/api/rest/validDateStatus/",
    "description": "Returns list of possible valid date status values.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": null
  },
  "get-database-configuration": {
    "path": "/api/rest/dbConfig/",
    "description": "Returns information about the database configuration.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": null
  },
  "retrieve-db-pool-statistics": {
    "path": "/api/rest/dbConfig/dbpoolstats",
    "description": "Retrieve DB Pool statistics.<p><p><b>Note:</b> This service will only return values if <i>DBPoolMonitoring</i> is set in <i>features.xml</i>.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": null
  },
  "save-the-database-configuration-details": {
    "path": "/api/rest/dbConfig/",
    "description": "Save the database configuration details",
    "operation": "POST",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": {"type":"PostgreSQL","hostName":"localhost","port":"5432","schema":"cm","username":"postgres","password":"scala","connectionOtions":"charSet=UTF-8","maxPoolSize":"20","minPoolSize":"5","poolTimeout":"60","poolIdleTest":"55"}
  },
  "test-the-database-connection": {
    "path": "/api/rest/pamdDbConfig/test",
    "description": "Test the database connection",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": [
      {
        "id": 8882,
        "name": "type",
        "description": "Database type",
        "datatype": "STRING"
      },
      {
        "id": 8883,
        "name": "hostName",
        "description": "Hostname",
        "datatype": "STRING"
      },
      {
        "id": 8884,
        "name": "port",
        "description": "Port number",
        "datatype": "INTEGER"
      },
      {
        "id": 8885,
        "name": "schema",
        "description": "Database schema name",
        "datatype": "STRING"
      },
      {
        "id": 8886,
        "name": "username",
        "description": "Database username",
        "datatype": "STRING"
      },
      {
        "id": 8887,
        "name": "password",
        "description": "Database password",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "create-directory": {
    "path": "/api/rest/directory/",
    "description": "Create a directory. Lead or trailing spaces in the path will be trimmed.<p><p>Some samples of request body:<p><b>Create new 'Demo' folder:</b>  {'path':'Demo/newPath'}<b>Create new 'Image' folder as sub directory of 'Demo':</b>  {'path':'Demo/Image'}<b>Create new 'Video/ads' folder in one call:</b>  {'path':'Video/ads'}",
    "operation": "POST",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": {
      "path": "Demo/NewFolder"
    }
  },
  "list-content-directory": {
    "path": "/api/rest/directory/{path}",
    "description": "List content directory. <p><p><b>Note:</b>: Due to / (slash) is reserved as path separator in URL, the directory names must be separated with a | rather than a /.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 3242,
        "name": "path",
        "datatype": "STRING"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "abort-broadcasts": {
    "path": "/api/rest/distributions/abortBroadcast/{uuid}",
    "description": "Abort broadcasts.<p><p>This service is useful for aborting one or more broadcasts. Broadcast object will be created to keep track of plan generation information whenever we generate plan for the broadcast player.Use Storage service and store IDs of the broadcasts you want to abort. Store it as JSON object like this:<pre class='prettyprint'>{'ids' : [1, 5]}</pre>The Storage service will return an UUID to be used in the request parameter.<p><p><b>Note</b>: Use <b>Get all broadcasts of the broadcast server</b> service in the Distributions for IDs of the broadcasts you want to abort.",
    "operation": "PUT",
    "pathParameters": [
      {
        "id": 4069,
        "name": "uuid",
        "description": "UUID representation of one or more broadcast ID.",
        "datatype": "STRING"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "confirm-plan-generation-of-the-broadcast": {
    "path": "/api/rest/distributions/confirmPlanGeneration/{taskId}",
    "description": "Confirm plan generation of the broadcast.<p><p>This service will allow user to confirm the plan generation of broadcast. Once user confirms the broadcast, the plan will be sent to the Tranmission Server.<b>Note:</b>No need to confirm the plan generation for the Point-to-Point(P2P) players. Plan generation is auto confirmed for Point-to-Point(P2P) players.",
    "operation": "PUT",
    "pathParameters": [
      {
        "id": 3965,
        "name": "taskId",
        "description": "UUID of the broadcast",
        "datatype": "STRING"
      }
    ],
    "queryParameters": null,
    "queryBody": {"name":"MyBroadcast","priority":"LOW","syncDate":"2013-01-01 00:00:00","uuid":"e5a3564a-f20b-4fde-9ccc-583876ea54bc","broadcastMedias":[{"id":"1","included":"true"},{"id":"2","included":"false"}]}
  },
  "create-a-distribution-server": {
    "path": "/api/rest/distributions/",
    "description": "Create distribution server.<p><p>Here are a few samples of request body for creating different types of servers.<ul><li>Create a broadcast server:</li></ul><b>Note:</b> Name is unique for broadcast server.<p><p><pre class='prettyprint'>{name : 'Sample Main Server',description : 'A Sample',driver : 'FILE',broadcastServer : {delivery : 'CONTENT_MANAGER_DIRECT',logLevel : 1,pollingInterval : 10,playerCacheSize : 11 }}</pre><ul><li>Create a IAadea server:</li></ul><b>Note:</b> Name is not unique for IAdea bridge servers.<p><p>If the virtual parent IAdea bridge server doesn't exist then this service will create virtual parent IAdea bridge server. This IAdea bridge server will be set as parent to the newly created IAdea bridge server.<p><pre class='prettyprint'>{name : 'Sample IAdea Server',description : ' Sample',driver : 'IADEA' }</pre><b>Note: we can't create distribution server of driver type <i>IP_P2P</i> </b><b>Distribution Driver options for Broadcast server.</b> <b>IP Mulicast driver options:</b> <li>Group ip: key='ipm_group-ip-address' type=text defaultValue='234.5.6.7'</li> <li>Group port: key='ipm_group-port' type=text defaultValue='8910'</li> <li>Server Transmits on IP: key='ipm_mif-ip-address' type=text defaultValue='null'</li> <li>Server Listens on Port: key='ipm_server-port' type=text defaultValue='40000'</li> <li>Packet Size: key='ipm_packet-size' type=text defaultValue='576'</li> <li>Time to live: key='ipm_ttl' type=text defaultValue='128'</li> <li>Bandwidth limit: key='ipm_max-kbps' type=text defaultValue='1024'</li> <li>Control Interval: key='ipm_control-message-interval' type=text defaultValue='100'</li> <li>Control redundancy: key='ipm_control-message-redundancy' type=text defaultValue='3'</li> <li>Use confirmed mode: key='ipm_confirmed-delivery-mode' type=boolean defaultValue='true'</li> <li>Use data redundancy: key='ipm_data-redundancy' type=text defaultValue='3'</li> <li>Cumulative Retransmits: key='ipm_cumulative-retransmit-count' type=text defaultValue='3'</li> <li>Transmit Retries per Player: key='ipm_transmission-retries-per-player' type=text defaultValue='3'</li> <li>Query Retries per Player: key='ipm_query-retries-per-player' type=text defaultValue='3'</li> <li>Tolerated data loss: key='ipm_tolerated-data-loss' type=text defaultValue='100'</li> <li>Player Response timeout: key='ipm_response-wait-time' type=text defaultValue='30'</li> <li>Max simultaneous querie:s key='ipm_simultaneous-queries' type=text defaultValue='100'</li> <li>Automatically Retransmit in Background: key='ipm_auto-retransmit' type=boolean defaultValue=rue'</li> <b>File driver options:</b> <li>Package Upload URL: key='file_package-path$URL$' type=text defaultValue='null'</li> <li>Resume FTP upload supported: key='file_resume-upload-supported' type=boolean defaultValue='false'</li> <b>HughesNet driver options:</b> <li>Package Upload FTP URL: key='hns_ftp-upload$URL$' type=text defaultValue='null'</li> <li>Resume FTP Upload Supported: key='hns_resume-upload-supported' type=boolean defaultValue='false'</li> <li>XML Interface URL: key='hns_xml-interface$URL$' type=text defaultValue='null'</li> <li>Best Effort Mode: key='hns_confirmed-delivery-mode' type=boolean defaultValue='true'</li> <li>Best Effort Count: key='hns_data-redundancy' type=text defaultValue='2'</li> <li>FEC Overhead: key='hns_fec-overhead' type=text defaultValue='0'</li> <li>Status delay: key='hns_status-polling-delay' type=text defaultValue='60'</li> <li>Source client: key='hns_source-client' type=text defaultValue='null'</li> <li>Client key: key='hns_source-client-key' type=text defaultValue='null'</li> <li>Destination Address: key='hns_destination-address' type=combobox defaultValue='Group'</li> <li>Community: key='hns_community' type=text defaultValue='null'</li> <li>Destination client: key='hns_destination-client' type=text defaultValue='null'</li> <li>PD sender DTD: key='hns_pdsender-dtd-folder' type=text defaultValue='C:\\Program Files\\Hughes Network Systems\\PDSender\\sfs\\dtd\\pd\\1.0'</li> <li>Report email: key='hns_email-address' type=text defaultValue='null'</li> <b>IPV6 driver options:</b> <li>Group ip :key='ipv6_group-ip-address ' type=text defaultValue='ff02::1'</li> <li>Group port: key='ipv6_group-port' type=text defaultValue='8910'</li> <li>Server Broadcast Interface Index: key='ipv6_server-broadcast-interface' type=text defaultValue='4'</li> <li>Server Listens on Port: key='ipv6_server-port' type=text defaultValue='40000'</li> <li>Packet Size: key='ipv6_packet-size' type=text defaultValue='576'</li> <li>Hop limit: key='ipv6_ttl' type=text defaultValue='128'</li> <li>Bandwidth limit: key='ipv6_max-kbps' type=text defaultValue='1024'</li> <li>Control Interval: key='ipv6_control-message-interval' type=text defaultValue='100'</li> <li>Control redundancy: key='ipv6_control-message-redundancy' type=text defaultValue='3'</li> <li>Use confirmed mode: key='ipv6_confirmed-delivery-mode' type=boolean defaultValue='true'</li> <li>Use data redundancy: key='ipv6_data-redundancy' type=text defaultValue='3'</li> <li>Cumulative Retransmits: key='ipv6_cumulative-retransmit-count' type=text defaultValue='3'</li> <li>Transmit Retries per Player: key='ipv6_transmission-retries-per-player' type=text defaultValue='3'</li> <li>Query Retries per Player: key='ipv6_query-retries-per-player' type=text defaultValue='3'</li> <li>Tolerated data loss: key='ipv6_tolerated-data-loss' type=text defaultValue='100'</li> <li>Player Response timeout: key='ipv6_response-wait-time' type=text defaultValue='30'</li> <li>Max simultaneous queries: key='ipv6_simultaneous-queries' type=text defaultValue='100'</li> <li>Automatically Retransmit in Background: key='ipv6_auto-retransmit' type=boolean defaultValue='true'</li> ",
    "operation": "POST",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": {
      "name": "SampleBroadcastServer",
      "description": "Sample",
      "driver": "FILE",
      "broadcastServer": {
        "delivery": "CONTENT_MANAGER_DIRECT",
        "logLevel": "1",
        "pollingInterval": "10",
        "playerCacheSize": "11"
      }
    }
  },
  "delete-iadea-bridge-server-by-id": {
    "path": "/api/rest/distributions/{id}",
    "description": "Delete IAdea bridge server by id.<p><p><b>Note</b>:We can't delete parent IAdea distribution server which has the child servers. Parent IAdea server will be deleted if we delete all child servers.",
    "operation": "DELETE",
    "pathParameters": [
      {
        "id": 3833,
        "name": "id",
        "description": "ID of the Iadea server to be deleted",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "find-broadcast-by-id": {
    "path": "/api/rest/distributions/broadcastProperties/{id}",
    "description": "Returns information about broadcast.<p><p>This service gives you the information(media files,players) of broadcast player plan.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 3793,
        "name": "id",
        "description": "Id of the Broadcast",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "find-distribution-server-by-id": {
    "path": "/api/rest/distributions/{id}",
    "description": "Returns information about the distribution server.<p><p>",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 3332,
        "name": "id",
        "description": "ID of the distribution to be fetched",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": [
      {
        "id": 3333,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "find-media-details-of-broadcast": {
    "path": "/api/rest/distributions/{uuid}/broadcastMedias",
    "description": "Returns information about broadcast media items.<p><p>This service gives you the information about media files of broadcast players plan.<b>Note</b>: Use <b>Get all broadcasts of the broadcast server</b> service in the Distributions for IDs of the broadcasts you want.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 4212,
        "name": "uuid",
        "description": "UUID of the Broadcast",
        "datatype": "STRING"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "find-player-details-of-broadcast": {
    "path": "/api/rest/distributions/{uuid}/broadcastPlayers",
    "description": "Returns information about players which have confirmed,unconfirmed,included and excluded from broadcst.<p><p>This service gives you the information about players of broadcast players plan.<b>Note</b>: Use <b>Get all broadcasts of the broadcast server</b> service in the Distributions for IDs of the broadcasts you want.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 4221,
        "name": "uuid",
        "description": "UUID of the Broadcast",
        "datatype": "STRING"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "find-players-information-of-the-distributed-media-item": {
    "path": "/api/rest/distributions/{mediaId}/{serverId}",
    "description": "Returns about the players information of the distributed media item.<p><p>This service gives you information about the players which have recieved and not recieved the distributed media item.<b>Note:</b>Use service <b> List all distrbuted media items of the distribution server </b> for distributed media item ID.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 3925,
        "name": "mediaId",
        "description": "ID of the distributed media to be fetched",
        "datatype": "INTEGER"
      },
      {
        "id": 3926,
        "name": "serverId",
        "description": "ID of the distribution server to be fetched",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "force-generate-plan-for-all-players-of-broadcast-server": {
    "path": "/api/rest/distributions/{serverId}/syncAllBroadcastPlayers",
    "description": "Force generate plan for all players of broadcsat server and returns the list of Distribution task objects.<p><p>This service allows user to forcibly generate plan for all broadcast players of broadcast server even if the plan is not diry.",
    "operation": "POST",
    "pathParameters": [
      {
        "id": 3948,
        "name": "serverId",
        "description": "Id of the Broadcast server",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "generate-plan": {
    "path": "/api/rest/players/{uuid}/generatePlan",
    "description": "Generate plan for one or more player.<p><p>Use Storage service and store IDs of the players you want to generate the plan Store it as JSON object like this:<pre class='prettyprint'>{'ids' : [1, 5]}</pre>The Storage service will return an UUID to be used in the request parameter.<p><p><b>Note: The service will not cast exception if you pass on a non-existing player id or player id belongs to another network.</b>",
    "operation": "POST",
    "pathParameters": [
      {
        "id": 10984,
        "name": "uuid",
        "description": "UUID representation of one or more player ID.",
        "datatype": "STRING"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "get-uuid-of-the-latest-broadcast": {
    "path": "/api/rest/distributions/broadcast/{id}",
    "description": "Returns Uuid of the latest broadcast.<p><p>",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 4306,
        "name": "id",
        "description": "ID of the broadcast server",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "get-all-broadcasts-of-the-broadcast-server": {
    "path": "/api/rest/distributions/{id}/broadcasts",
    "description": "Returns one or more broadcasts of the Broadcast server.<p><p>",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 4062,
        "name": "id",
        "description": "ID of the Broadcast server",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "get-all-child-iadea-servers-status-of-current-network": {
    "path": "/api/rest/distributions/childStatus",
    "description": "Returns status for all child IAdea servers status of current network.<p><p>",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": null
  },
  "get-all-distribution-servers-except-child-iadea-servers-status-of-current-network": {
    "path": "/api/rest/distributions/status",
    "description": "Returns status for all the distribution servers except child IAdea servers status of current network.<p><p>",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": null
  },
  "get-all-media-of-the-pending-broadcast": {
    "path": "/api/rest/distributions/{uuid}/pendingBroadcastMedia",
    "description": "Returns one or more media items of the pending broadcast.<p><p>",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 4248,
        "name": "uuid",
        "description": "Uuid of the broadcast",
        "datatype": "STRING"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "get-all-players-of-the-pending-broadcast": {
    "path": "/api/rest/distributions/{uuid}/pendingBroadcastPlayers",
    "description": "Returns one or more players of the pending broadcast.<p><p>",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 4256,
        "name": "uuid",
        "description": "Uuid of the broadcast",
        "datatype": "STRING"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "get-broadcast-details-by-broadcast-uuid": {
    "path": "/api/rest/distributions/{uuid}/broadcastDetails",
    "description": "Return information of the broadcast package.<p><p>",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 3970,
        "name": "uuid",
        "description": "uuid of the distribution",
        "datatype": "STRING"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "get-count-of-iadea-bridge-servers-in-the-current-network": {
    "path": "/api/rest/distributions/iadea/count",
    "description": "Returns count of IAdea bridge servers in the current network.<p><p>",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": null
  },
  "get-next-run-for-all-scheduled-synchronizations-of-distribution-server": {
    "path": "/api/rest/distributions/{id}/nextrun",
    "description": "Returns next run for all scheduled synchronizations.<p><p>",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 4328,
        "name": "id",
        "description": "ID of the distribution server to be fetched",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "get-plan-genrearation-history": {
    "path": "/api/rest/distributions/plans/{id}",
    "description": "Returns information about history of player plans.<p><p>",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 3942,
        "name": "id",
        "description": "ID of the distribution server",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "get-progress-percentage-of-the-distribution-task": {
    "path": "/api/rest/distributions/taskState/{id}",
    "description": "Returns information about distribution task progress percentage of the distribution server.<p><p>",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 4331,
        "name": "id",
        "description": "ID of the distribution server",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "list-all-distrbuted-media-items-of-the-distribution-server-": {
    "path": "/api/rest/distributions/{id}/distributedMedia",
    "description": "Returns one or more distrbuted media items of the distribution server.<p><p>",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 3912,
        "name": "id",
        "description": "ID of the distrbution server to be fetched",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": [
      {
        "id": 3913,
        "name": "limit",
        "description": "Limit search result",
        "defaultValue": "10",
        "datatype": "INTEGER"
      },
      {
        "id": 3914,
        "name": "offset",
        "description": "Offset is the first index to perform the search. Use this for paging.",
        "defaultValue": "0",
        "datatype": "INTEGER"
      },
      {
        "id": 3915,
        "name": "sort",
        "description": "Comma separated list of fields to sort by. Use - sign (minus sign) to identify the column should be sort by descending.You can use + sign to indicate ascending sort, but remember you need to URL encode the + sign. To avoid URL encoding issue, just leave out the + sign.",
        "defaultValue": "media",
        "datatype": "STRING"
      },
      {
        "id": 3916,
        "name": "filters",
        "description": "One or more filter can be apply with following comparator:<b>eq</b>, <b>ne</b>, <b>ge</b>, <b>le</b>, <b>gt</b>, <b>lt</b>, <b>in</b> and <b>like</b>.<p><p>",
        "sample": "{'name' : {'values':['test%', '%xmas%'], comparator : 'like'}}",
        "datatype": "STRING"
      },
      {
        "id": 3917,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      },
      {
        "id": 3918,
        "name": "search",
        "description": "A string that the user wants to search for.The system will search for distribution items with [todo: description search fields] containing that string.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "list-all-media-items-of-the-broadcast": {
    "path": "/api/rest/distributions/{uuid}/broadcastPackage",
    "description": "Returns one or more list of media items of the broadcast.<p><p>This service gives you information about list of media files of broadcast players plan.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 3825,
        "name": "uuid",
        "description": "Uuid of the broadcast",
        "datatype": "STRING"
      }
    ],
    "queryParameters": [
      {
        "id": 3826,
        "name": "limit",
        "description": "Limit search result",
        "defaultValue": "10",
        "datatype": "INTEGER"
      },
      {
        "id": 3827,
        "name": "offset",
        "description": "Offset is the first index to perform the search. Use this for paging.",
        "defaultValue": "0",
        "datatype": "INTEGER"
      },
      {
        "id": 3828,
        "name": "sort",
        "description": "Comma separated list of fields to sort by. Use - sign (minus sign) to identify the column should be sort by descending.You can use + sign to indicate ascending sort, but remember you need to URL encode the + sign. To avoid URL encoding issue, just leave out the + sign.",
        "defaultValue": "media",
        "datatype": "STRING"
      },
      {
        "id": 3829,
        "name": "filters",
        "description": "One or more filter can be apply with following comparator:<b>eq</b>, <b>ne</b>, <b>ge</b>, <b>le</b>, <b>gt</b>, <b>lt</b>, <b>in</b> and <b>like</b>.<p><p>",
        "sample": "{'name' : {'values':['test%', '%xmas%'], comparator : 'like'}}",
        "datatype": "STRING"
      },
      {
        "id": 3830,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      },
      {
        "id": 3831,
        "name": "search",
        "description": "A string that the user wants to search for.The system will search for distribution items with [todo: description search fields] containing that string.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "list-distributed-media-types": {
    "path": "/api/rest/distributions/types",
    "description": "Returns list of distributed media types the server supports.<p><p>",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": null
  },
  "list-distribution-servers": {
    "path": "/api/rest/distributions/",
    "description": "Returns one or more distribution server's information.<p><p>Filters:<p><ul><li> <i>Distribution servers without child IAdes bridge servers</i>:</li><pre class='prettyprint linenums'>filters = {servers : {values : ['EXCEPT_IADEA_CHILDREN']}}</pre><li> <i>Distribution servers with only child IAdes bridge servers</i>:</li><pre class='prettyprint linenums'>filters = {servers : {values : ['ALL_IADEA_CHILDREN']}}</pre></ul>",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": [
      {
        "id": 3577,
        "name": "limit",
        "description": "Limit search result",
        "defaultValue": "10",
        "datatype": "INTEGER"
      },
      {
        "id": 3578,
        "name": "offset",
        "description": "Offset is the first index to perform the search. Use this for paging.",
        "defaultValue": "0",
        "datatype": "INTEGER"
      },
      {
        "id": 3579,
        "name": "sort",
        "description": "Comma separated list of fields to sort by. Use - sign (minus sign) to identify the column should be sort by descending.You can use + sign to indicate ascending sort, but remember you need to URL encode the + sign. To avoid URL encoding issue, just leave out the + sign.",
        "defaultValue": "name",
        "datatype": "STRING"
      },
      {
        "id": 3580,
        "name": "filters",
        "description": "One or more filter can be apply with following comparator:<b>eq</b>, <b>ne</b>, <b>ge</b>, <b>le</b>, <b>gt</b>, <b>lt</b>, <b>in</b> and <b>like</b>.<p><p> <b>Note:</b> Added filter for servers.1. We just support <b>eq</b>, <b>ne</b> as a comparator for servers filter.2. We can filter distribution servers based on servers.Allowed values for servers <b>ALL_IADEA_CHILDREN</b> or <b>EXCEPT_IADEA_CHILDREN</b>.The sample filter below will list down all the distribution servers except child IAdea bridge servers where servers is <b>EXCEPT_IADEA_CHILDREN</b>.You can refer sample for more details.",
        "sample": "{'name' : {'values':['test%', '%xmas%'], comparator : 'like'}}  or  {'servers': { 'values':[ 'EXCEPT_IADEA_CHILDREN' ] }}",
        "datatype": "STRING"
      },
      {
        "id": 3581,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      },
      {
        "id": 3582,
        "name": "search",
        "description": "A string that the user wants to search for.The system will search for distribution items with dstribution names containing that string.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "reject-plan-generation-of-the-broadcast": {
    "path": "/api/rest/distributions/rejectPlanGeneration/{taskId}",
    "description": "Reject plan generation of the broadcast.<p><p>This service allow the user to reject the plan generation of broadcast.Once the user reject the broadcast, the stored player plans will be deleted.<b>Note: </b> This service is not applicable for Point-to-Point(P2P) players plan.",
    "operation": "DELETE",
    "pathParameters": [
      {
        "id": 3950,
        "name": "taskId",
        "description": "UUID of the Broadcast",
        "datatype": "STRING"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "reset-mac-address-of-the-broadcast-server": {
    "path": "/api/rest/distributions/resetMac/{id}",
    "description": "Reset mac address for broadcast server.<p><p>",
    "operation": "PUT",
    "pathParameters": [
      {
        "id": 4303,
        "name": "id",
        "description": "ID of the broadcast server to reset the MAC address",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "update-broadcast": {
    "path": "/api/rest/distributions/broadcastProperties/{id}",
    "description": "Update Broadcast.<p><p>",
    "operation": "PUT",
    "pathParameters": [
      {
        "id": 4301,
        "name": "id",
        "description": "Id of the broadcast to be updated",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": {"id":"1","uuid":"0756c9fb-fa14-4b07-8c0c-d923a26df421","name":"SampleBroadcast","priority":"NORMAL","state":"PENDING","syncTime":"2013-01-01 00:00:00","scheduleType":"ASAP","media":[{"media":{"id":"2"},"included":"true"}],"players":[{"player":{"id":"2","confirmed":"true"}}]}
  },
  "update-distribution-server-by-id": {
    "path": "/api/rest/distributions/{id}",
    "description": "update distribution server by id.<p><p>Here are a few samples of request body for updating different types of servers.<ul><li>Update Main(P2P) server:</li></ul><b>Note:</b> Name is unique for Main server and You can't update P2P server driver type with <i>IADEA,FILE,HUGHES_NET,IPV6,IP_MULTICAST</i>.<p><p><pre class='prettyprint'>{id: 2,name:  'Sample Main Server',synchronization: 'MANUAL',driver : 'IP_P2P',auditSettings : {enabled : true,maxDatabaseAge : 90,uploadFrequency : 'NIGHTLY' },monitoringSettings : {enabled : true,heartbeatRate : 2,overdueRate: 5,planStatusInterval: 1,diskSpaceReserve: 50,purgeLogsAfter: 7,uploadLogs: true }}</pre><ul><li>Update broadcast server:</li></ul><b>Note:</b> Name is unique for broadcast server and You can't update broadcast server driver type with <i>IP_P2P,IADEA</i>.<p><p>.<p><p><pre class='prettyprint'>{id: 2,name : 'Sample Broadcast Server',description : 'A Sample',driver : 'FILE',broadcastServer : {delivery : 'CONTENT_MANAGER_DIRECT',logLevel : 1,pollingInterval : 10,playerCacheSize : 11 },auditSettings : {enabled : true,maxDatabaseAge : 90,uploadFrequency : 'NIGHTLY' },monitoringSettings : {enabled : true,heartbeatRate : 2,overdueRate: 5,planStatusInterval: 1,diskSpaceReserve: 50,purgeLogsAfter: 7,uploadLogs: true }}</pre><ul><li>Update parent IAadea server:</li></ul><b>Note:</b> Name is not unique for IAdea bridge servers and You can't update IAdea server driver type with <i>IP_P2P,FILE,HUGHES_NET,IPV6,IP_MULTICAST</i>.<p><p><pre class='prettyprint'>{id: 2,name : 'Sample IAdea Server',description : ' Sample',driver : 'IADEA', iadeaServer : {planPollingRate : 1,logLevel : 2,scheduleExpansionDays : 7,planErrorRepollingRate : 1,planStatusErrorRetryRate : 13,playerHeartbeatRate : 11,scheduleRefreshTime : '03:00:00',uploadFrequency : 'NIGHTLY' },auditSettings : {enabled : true,maxDatabaseAge : 90,uploadFrequency : 'NIGHTLY' },monitoringSettings : {overdueRate: 5 }}</pre><ul><li>Update child IAadea server:</li></ul><b>Note:</b> Name is not unique for IAdea bridge servers and You can't update IAdea server driver type with <i>IP_P2P,FILE,HUGHES_NET,IPV6,IP_MULTICAST</i>.<p><p><pre class='prettyprint'>{id: 2,name : 'Sample IAdea Server',description : ' Sample',driver : 'IADEA' }</pre>",
    "operation": "PUT",
    "pathParameters": [
      {
        "id": 3661,
        "name": "id",
        "description": "ID of the distribution server to be updated",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": {
      "id": "2",
      "name": "BroadcastServerTest",
      "synchronization": "MANUAL",
      "auditSettings": {
        "enabled": "true",
        "maxDatabaseAge": "90",
        "uploadFrequency": "NIGHTLY"
      },
      "monitoringSettings": {
        "enabled": "true",
        "heartbeatRate": "2",
        "overdueRate": "5",
        "planStatusInterval": "1",
        "diskSpaceReserve": "50",
        "purgeLogsAfter": "7",
        "uploadLogs": "true"
      }
    }
  },
  "initiate-upload": {
    "path": "/api/rest/fileupload/init",
    "description": "Begin a file upload and obtain an upload id.",
    "operation": "POST",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": null
  },
  "upload-file-part-(put)": {
    "path": "/api/rest/fileupload/part/{uploadId}/{offset}",
    "description": "Send one part of a multipart file upload.",
    "operation": "PUT",
    "pathParameters": [
      {
        "id": 4338,
        "name": "uploadId",
        "description": "The ID obtained from file upload's initiate service.",
        "datatype": "STRING"
      },
      {
        "id": 4339,
        "name": "offset",
        "description": "File offset.",
        "datatype": "AUTO"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "upload-single-file-(post)": {
    "path": "/api/rest/fileupload/part/{uploadId}/{offset}",
    "description": "Upload media data. Once all data is transfered, the server will automatically call 'complete' service.",
    "operation": "POST",
    "pathParameters": [
      {
        "id": 4353,
        "name": "uploadId",
        "description": "The ID obtained from file upload's initiate service.",
        "datatype": "STRING"
      },
      {
        "id": 4354,
        "name": "offset",
        "description": "File offset.",
        "datatype": "AUTO"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "upload-finished": {
    "path": "/api/rest/fileupload/complete/{uploadId}",
    "description": "Indicates all parts of the file have been sent via fileupload/part ",
    "operation": "POST",
    "pathParameters": [
      {
        "id": 4335,
        "name": "uploadId",
        "description": "The ID obtained from file upload's initiate service.",
        "datatype": "STRING"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "create-a-frameset-template": {
    "path": "/api/rest/framesetTemplates/",
    "description": "Create new frameset template.<p><p>",
    "operation": "POST",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": {
      "name": "framesetname"
    }
  },
  "delete-frameset-template-by-id": {
    "path": "/api/rest/framesetTemplates/{id}",
    "description": "Delete frameset template by id.",
    "operation": "DELETE",
    "pathParameters": [
      {
        "id": 4381,
        "name": "id",
        "description": "ID of the frameset template to be deleted",
        "datatype": "AUTO"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "find-frameset-template-by-id": {
    "path": "/api/rest/framesetTemplates/{id}",
    "description": "Returns information about the frameset template.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 4378,
        "name": "id",
        "description": "ID of the frameset to be fetched",
        "datatype": "AUTO"
      }
    ],
    "queryParameters": [
      {
        "id": 4379,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "get-the-list-of-frame-numbers-": {
    "path": "/api/rest/framesetTemplates/numberOfFrames",
    "description": "Returns a list of frame numbers that has been associated with frameset and number of framesets those are using corresponding frame number ",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": null
  },
  "list-all-available-frameset-templates": {
    "path": "/api/rest/framesetTemplates/",
    "description": "Returns information about framesets.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": [
      {
        "id": 4446,
        "name": "limit",
        "description": "Limit search result",
        "defaultValue": "10",
        "datatype": "INTEGER"
      },
      {
        "id": 4447,
        "name": "offset",
        "description": "Offset is the first index to perform the search. Use this for paging.",
        "defaultValue": "0",
        "datatype": "INTEGER"
      },
      {
        "id": 4448,
        "name": "sort",
        "description": "Comma separated list of fields to sort by. Use - sign (minus sign) to identify the column should be sort by descending.You can use + sign to indicate ascending sort, but remember you need to URL encode the + sign. To avoid URL encoding issue, just leave out the + sign.",
        "defaultValue": "name",
        "datatype": "STRING"
      },
      {
        "id": 4449,
        "name": "filters",
        "description": "One or more filter can be apply with following comparator:<b>eq</b>, <b>ne</b>, <b>ge</b>, <b>le</b>, <b>gt</b>, <b>lt</b>, <b>in</b> and <b>like</b>.<p><p>",
        "sample": "{'name' : {'values':['%.png', 'test%', '%xmas%'], comparator : 'like'}}",
        "datatype": "STRING"
      },
      {
        "id": 4450,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      },
      {
        "id": 4451,
        "name": "search",
        "description": "A string that the user wants to search for.The system will search for channel items with names or descriptions containing that string.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "update-a-frameset-template": {
    "path": "/api/rest/framesetTemplates/{id}",
    "description": "Update existing frameset template by id.",
    "operation": "PUT",
    "pathParameters": [
      {
        "id": 4473,
        "name": "id",
        "description": "ID of the frameset template to be updated",
        "datatype": "AUTO"
      }
    ],
    "queryParameters": null,
    "queryBody": {
      "height": "1024",
      "width": "768"
    }
  },
  "get-current-heartbeat-sequence-of-a-player": {
    "path": "/api/rest/heartbeats/sequence/{uuid}",
    "description": "Return a current heartbeat's sequence of a player. Return 0 if no heartbeat registered.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 4481,
        "name": "uuid",
        "description": "UUID of the player",
        "datatype": "STRING"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "renew-license": {
    "path": "/api/rest/heartbeats/renewLicense/{uuid}",
    "description": "Return a new license for a particular player.<p><p>",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 4508,
        "name": "uuid",
        "description": "UUID of the player for which license has to be renewed",
        "datatype": "STRING"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "report-heartbeat": {
    "path": "/api/rest/heartbeats/",
    "description": "Report heartbeat with heartbeat events. Heartbeat events will be present only if the player is reporting events.<p><p><pre class='prettyprint'>{uuid: '8552bc7c-90cb-4199-a896-6b492dbffa85',timestamp: '2013-11-07 23:22:17',bootTimestamp: '2013-11-07 23:22:17',sequence : 1,events : [{,errorNumber : '44.3',problemMessage : 'A media item is missing at the source and could not be downloaded.',logName : 'IC',problemNumber : 95,dateTime : '2013-11-07 23:18:17',lastDateTime : '2013-11-07 23:22:17',problemRemainder : 'Error 44.3: (scriptxfer) File 'plan.xml' is missing at source.',sequence : '2',type : 'error',source : 'NETIC',}]}</pre>",
    "operation": "POST",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": {"uuid":"8552bc7c-90cb-4199-a896-6b492dbffa85","timestamp":"2013-06-08 13:00:17","bootTimestamp":"2013-11-07 23:22:17","sequence":"1","active":"true","events":[{"errorNumber":"44.3","problemMessage":"Amediaitemismissingatthesourceandcouldnotbedownloaded.","logName":"IC","problemNumber":"95","dateTime":"2013-11-07 23:18:17","lastDateTime":"2013-11-07 23:22:17","problemRemainder":"Error44.3(scriptxfer)Fileplan.xmlismissingatsource.","sequence":"2","type":"error","source":"NETIC"}]}
  },
  "delete-hosted-network-by-id": {
    "path": "/api/rest/hostednetworks/{id}",
    "description": "Delete hosted network by id.",
    "operation": "DELETE",
    "pathParameters": [
      {
        "id": 4511,
        "name": "id",
        "description": "ID of the network to be deleted",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "get-hosted-network-by-id": {
    "path": "/api/rest/hostednetworks/{id}",
    "description": "Returns information about the hosted network.<p><p><b>NOTE:</b> Only super-administrator is allowed to retrieve <i>any</i> network by ID. For other users, they are only allowed to retrieve their own network.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 4575,
        "name": "id",
        "description": "ID of the network to be fetched",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "list-hosted-networks": {
    "path": "/api/rest/hostednetworks/",
    "description": "Returns one or more hosted network's information.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": [
      {
        "id": 4556,
        "name": "limit",
        "description": "Limit search result",
        "defaultValue": "10",
        "datatype": "INTEGER"
      },
      {
        "id": 4557,
        "name": "offset",
        "description": "Offset is the first index to perform the search. Use this for paging.",
        "defaultValue": "0",
        "datatype": "INTEGER"
      },
      {
        "id": 4558,
        "name": "sort",
        "description": "Comma separated list of fields to sort by. Use - sign (minus sign) to identify the column should be sort by descending.You can use + sign to indicate ascending sort, but remember you need to URL encode the + sign. To avoid URL encoding issue, just leave out the + sign.",
        "defaultValue": "name",
        "datatype": "STRING"
      },
      {
        "id": 4559,
        "name": "filters",
        "description": "One or more filter can be apply with following comparator:<b>eq</b>, <b>ne</b>, <b>ge</b>, <b>le</b>, <b>gt</b>, <b>lt</b>, <b>in</b> and <b>like</b>.<p><p>",
        "sample": "{'name' : {'values':['test%', '%xmas%'], comparator : 'like'}}",
        "datatype": "STRING"
      },
      {
        "id": 4560,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      },
      {
        "id": 4561,
        "name": "search",
        "description": "A string that the user wants to search for.The system will search for networks with [todo: description search fields] containing that string.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "update-hosted-network": {
    "path": "/api/rest/hostednetworks/{id}",
    "description": "Update hosted network",
    "operation": "PUT",
    "pathParameters": [
      {
        "id": 4591,
        "name": "id",
        "description": "ID of the Network to be updated",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": {
      "description": "Demo.",
      "active": "True"
    }
  },
  "find-language-by-id": {
    "path": "/api/rest/languages/{id}",
    "description": "Returns information about the language.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 4600,
        "name": "id",
        "description": "ID of the language to be fetched",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": [
      {
        "id": 4601,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "find-language-by-isocode": {
    "path": "/api/rest/languages/isocode/{isocode}",
    "description": "Returns information about the language.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 4628,
        "name": "isocode",
        "description": "IsoCode of the language to be fetched",
        "datatype": "STRING"
      }
    ],
    "queryParameters": [
      {
        "id": 4629,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "list-languages": {
    "path": "/api/rest/languages/",
    "description": "Returns List of available languages.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": [
      {
        "id": 4615,
        "name": "limit",
        "description": "Limit search result",
        "defaultValue": "10",
        "datatype": "INTEGER"
      },
      {
        "id": 4616,
        "name": "offset",
        "description": "Offset is the first index to perform the search. Use this for paging.",
        "defaultValue": "0",
        "datatype": "INTEGER"
      },
      {
        "id": 4617,
        "name": "sort",
        "description": "Comma separated list of fields to sort by. Use - sign (minus sign) to identify the column should be sort by descending.You can use + sign to indicate ascending sort, but remember you need to URL encode the + sign. To avoid URL encoding issue, just leave out the + sign.",
        "defaultValue": "name",
        "datatype": "STRING"
      },
      {
        "id": 4618,
        "name": "filters",
        "description": "One or more filter can be apply with following comparator:<b>eq</b>, <b>ne</b>, <b>ge</b>, <b>le</b>, <b>gt</b>, <b>lt</b>, <b>in</b> and <b>like</b>.<p><p>",
        "sample": "{'name' : {'values':['test%', '%xmas%'], comparator : 'like'}}",
        "datatype": "STRING"
      },
      {
        "id": 4619,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      },
      {
        "id": 4620,
        "name": "search",
        "description": "A string that the user wants to search for.The system will search for languages with names containing that string.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "list-ldap-user": {
    "path": "/api/rest/ldap/",
    "description": "Returns one or more LDAP user's information.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": [
      {
        "id": 4646,
        "name": "limit",
        "description": "Limit search result",
        "defaultValue": "10",
        "datatype": "INTEGER"
      },
      {
        "id": 4647,
        "name": "search",
        "description": "Ldap user name that the CM user wants to search for.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "save-ldap-user": {
    "path": "/api/rest/ldap/saveLdapUser",
    "description": "Save LDAP user to CM.",
    "operation": "POST",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": {
      "ldapUsers": [
        "username1",
        "username2"
      ]
    }
  },
  "test-ldap-connection": {
    "path": "/api/rest/serverstatus/testLdapAuthentication",
    "description": "Test LDAP connection.",
    "operation": "POST",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": {"url":"ldap://xxxx.xxxx.com:00000","userDn":"DC=xxxxx","DC":"xxxxx","DC":"COM","searchFilter":"sAMAccountName"}
  },
  "accept-new-license": {
    "path": "/api/rest/license/acceptNewLicense",
    "description": "Accept new license. Once new license is uploaded, the user can use the service to accept the new license.",
    "operation": "POST",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": null
  },
  "cancel-new-license": {
    "path": "/api/rest/license/cancelNewLicense",
    "description": "Cancel new license. Once new license is uploaded, the user can use the service to cancel the new license.",
    "operation": "DELETE",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": null
  },
  "check-feature-enable": {
    "path": "/api/rest/license/isFeatureEnabled/{name}",
    "description": "Returns true if the feature is enabled in <i>features.xml</i>",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 4760,
        "name": "name",
        "description": "<a target='_blank' href='https://sites.google.com/a/scala.com/content-manager-5/home/features-xml' >https://sites.google.com/a/scala.com/content-manager-5/home/features-xml</a>",
        "datatype": "STRING"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "get-license-file-online": {
    "path": "/api/rest/license/onlineCheck",
    "description": "Returns license information.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": null
  },
  "import-license-file(with-ie)": {
    "path": "/api/rest/license/importLicense/{filename}",
    "description": "Returns license information.",
    "operation": "POST",
    "pathParameters": [
      {
        "id": 4814,
        "name": "filename",
        "description": "Filename",
        "datatype": "STRING"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "retrieve-license-information-by-network-id": {
    "path": "/api/rest/license/networks/{id}",
    "description": "Returns license information.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 4707,
        "name": "id",
        "description": "ID of the network to fetch license information ",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "retrieve-license-information-for-current-network": {
    "path": "/api/rest/license/",
    "description": "Returns license information for current network.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": null
  },
  "retrieve-server-license-information": {
    "path": "/api/rest/license/server",
    "description": "Returns license information for the whole server.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": null
  },
  "upload-license-file": {
    "path": "/api/rest/license/uploadLicense/{filename}",
    "description": "Returns license information.",
    "operation": "POST",
    "pathParameters": [
      {
        "id": 4924,
        "name": "filename",
        "description": "Filename",
        "datatype": "STRING"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "append-player-log": {
    "path": "/api/rest/log/log/player",
    "description": "Append player log.<p><p>If the file does not exist, then the server will create new file. Otherwise the log will be appended to existing one.",
    "operation": "POST",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": {"playerUuid":"556a9a56-3ee7-4106-8bd7-e3133537af1d","filename":"healthlog20131029.log","log":"28-10-2013 16:45:56.888,INFOTest:This is a testlog,line1\\\r28-10-2013 16:45:57.111,INFOTest:Howareyou,line2."}
  },
  "disable-debug-for-a-module": {
    "path": "/api/rest/log/info",
    "description": "Disable debug for a module and set the log-level to INFO.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": [
      {
        "id": 4946,
        "name": "module",
        "description": "Name of the module.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "enable-debug-for-a-module": {
    "path": "/api/rest/log/debug",
    "description": "Enable debug for a module.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": [
      {
        "id": 4954,
        "name": "module",
        "description": "Name of the module.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "get-last-logs-offset": {
    "path": "/api/rest/log/offset",
    "description": "Get last log's offset.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": null
  },
  "list-modules": {
    "path": "/api/rest/log/modules",
    "description": "List of modules you can enable or disable DEBUG mode.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": null
  },
  "tail-end-of-current-log": {
    "path": "/api/rest/log/",
    "description": "Returns tail end of current log file.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": [
      {
        "id": 4935,
        "name": "limit",
        "description": "Limit search result. Remember, this service will only retrieve tail end of current log file. <br>Maximum of 500 log entries will be buffered for tailing.",
        "defaultValue": "500",
        "datatype": "INTEGER"
      },
      {
        "id": 4936,
        "name": "offset",
        "description": "Offset of this service is used like filter for retrieving log entry from specified id.Setting offset to 30 is the same as filter=id>30",
        "defaultValue": "0",
        "datatype": "INTEGER"
      },
      {
        "id": 4937,
        "name": "filters",
        "description": "You can only filter with greater than comparator on id field. See sample.",
        "sample": "GET /rest/media?filter=id>123",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "zip-player-log": {
    "path": "/api/rest/log/zip/log",
    "description": "Once player log is appended to the server, you can call this service to zip it. The orginal file will be deleted once the zip file is created.",
    "operation": "POST",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": {
      "playerUuid": "556a9a56-3ee7-4106-8bd7-e3133537af1d",
      "filename": "healthlog20131029.log",
      "zipName": "healthlog20131029.zip"
    }
  },
  "delete-file-from-tasks-(deprecated)": {
    "path": "/api/rest/maintenancefiles/{id}",
    "description": "This service is deprecated. You can use 'Delete maintenance file' from Update API.",
    "operation": "DELETE",
    "pathParameters": [
      {
        "id": 4957,
        "name": "id",
        "description": "ID of the media",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "list-available-files": {
    "path": "/api/rest/maintenancefiles/",
    "description": "Returns the list of uploaded files for file install task.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": [
      {
        "id": 4969,
        "name": "limit",
        "description": "Limit search result",
        "defaultValue": "10",
        "datatype": "INTEGER"
      },
      {
        "id": 4970,
        "name": "offset",
        "description": "Offset is the first index to perform the search. Use this for paging.",
        "defaultValue": "0",
        "datatype": "INTEGER"
      },
      {
        "id": 4971,
        "name": "sort",
        "description": "Comma separated list of fields to sort by. Use - sign (minus sign) to identify the column should be sort by descending.You can use + sign to indicate ascending sort, but remember you need to URL encode the + sign. To avoid URL encoding issue, just leave out the + sign.",
        "defaultValue": "name",
        "datatype": "STRING"
      },
      {
        "id": 4972,
        "name": "filters",
        "description": "One or more filter can be apply with following comparator:<b>eq</b>, <b>ne</b>, <b>ge</b>, <b>le</b>, <b>gt</b>, <b>lt</b>, <b>in</b> and <b>like</b>.<p><p>",
        "sample": "{'name' : {'values':['test%', '%xmas%'], comparator : 'like'}}",
        "datatype": "STRING"
      },
      {
        "id": 4973,
        "name": "search",
        "description": "A string that the user wants to search for.The system will search for media items with names or descriptions containing that string.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "multi-delete-one-or-many-file-from-tasks-(deprecated)": {
    "path": "/api/rest/maintenancefiles/multi/{uuid}",
    "description": "This service is deprecated. You can use 'Delete maintenance files' from Update API.",
    "operation": "DELETE",
    "pathParameters": [
      {
        "id": 4975,
        "name": "uuid",
        "datatype": "STRING"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "add-multiple-player-groups-to-the-maintenance-job": {
    "path": "/api/rest/maintenances/{id}/playerGroups",
    "description": "Adds multiple player groups to the maintenance job. ",
    "operation": "POST",
    "pathParameters": [
      {
        "id": 6432,
        "name": "id",
        "description": "Id of the maintenance job",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "add-multiple-players-to-the-maintenance-job": {
    "path": "/api/rest/maintenances/{id}/players",
    "description": "Adds multiple players to the maintenance job. ",
    "operation": "POST",
    "pathParameters": [
      {
        "id": 6414,
        "name": "id",
        "description": "Id of the maintenance job",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "add-player-group-to-the-maintenance-job": {
    "path": "/api/rest/maintenances/{id}/playerGroups/{playerGroupId}",
    "description": "Add player group to the maintenance job. ",
    "operation": "POST",
    "pathParameters": [
      {
        "id": 6422,
        "name": "id",
        "description": "Id of the maintenance job",
        "datatype": "INTEGER"
      },
      {
        "id": 6423,
        "name": "playerGroupId",
        "description": "Id of the player group being added",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "add-player-to-the-maintenance-job": {
    "path": "/api/rest/maintenances/{id}/players/{playerId}",
    "description": "Add player to the maintenance job. ",
    "operation": "POST",
    "pathParameters": [
      {
        "id": 6404,
        "name": "id",
        "description": "Id of the maintenance job",
        "datatype": "INTEGER"
      },
      {
        "id": 6405,
        "name": "playerId",
        "description": "Id of the player being added",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "create-a-maintenance-job": {
    "path": "/api/rest/maintenances/",
    "description": "create a new maintenance job",
    "operation": "POST",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": {"description":"descriptionofmaintenancejob","name":"thename","created":"15-10-2012","modified":"15-10-2012","jobType":"SCALA","lastModified":"08-08-2012","createdBy":{"firstname":"SystemAdministrator","lastLogin":"2012-09-04 14:53:36","username":"administrator"},"modifiedBy":{"firstname":"SystemAdministrator","lastLogin":"2012-09-04 14:53:36","username":"administrator"},"statistics":{"countFailure":"0","countSuccess":"0","numOfPlayersConfirmed":"0","numOfPlayersNotPublished":"0","numOfQueuedPlayers":"0"}}
  },
  "delete-maintenance-job-by-id": {
    "path": "/api/rest/maintenances/{id}",
    "description": "Delete maintenance job by id. If you want to delete more than one maintenance job, you can use delete maintenance job by filters service.",
    "operation": "DELETE",
    "pathParameters": [
      {
        "id": 5045,
        "name": "id",
        "description": "ID of the maintenance job to be deleted",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "find-maintenance-job-by-id": {
    "path": "/api/rest/maintenances/{id}",
    "description": "Returns information about the maintenance's job.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 5042,
        "name": "id",
        "description": "ID of the MaintenanceJob to be fetched",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": [
      {
        "id": 5043,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "get-job-execution-results-for-a-maintenance-job": {
    "path": "/api/rest/maintenances/executions/{rev_uuid}",
    "description": "Returns job execution results for a maintenance job",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 5514,
        "name": "rev_uuid",
        "description": "Revision UUID of the maintenance job",
        "datatype": "STRING"
      }
    ],
    "queryParameters": [
      {
        "id": 5515,
        "name": "offset",
        "description": "Offset is the first index to perform the search. Use this for paging.",
        "defaultValue": "0",
        "datatype": "INTEGER"
      },
      {
        "id": 5516,
        "name": "limit",
        "description": "Limit search result",
        "defaultValue": "10",
        "datatype": "INTEGER"
      },
      {
        "id": 5517,
        "name": "filters",
        "description": "One or more filter can be apply with following comparator:<b>eq</b>, <b>ne</b>, <b>ge</b>, <b>le</b>, <b>gt</b>, <b>lt</b>, <b>in</b> and <b>like</b>.<p><p>",
        "sample": "{'name' : {'values':['test%', '%xmas%'], comparator : 'like'}}",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "get-list-of-job-revisions-for-a-maintenance-job-(deprecated)": {
    "path": "/api/rest/maintenances/{job_id}/revisions",
    "description": "This service is deprecated",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 5523,
        "name": "job_id",
        "description": "ID of the maintenance job",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "get-list-of-job-runs-summary": {
    "path": "/api/rest/maintenances/{id}/runs",
    "description": "Returns a summary for each job run",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 5400,
        "name": "id",
        "description": "ID of the maintenance job",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "get-maintenance-job-statistics": {
    "path": "/api/rest/maintenances/{id}/statistics",
    "description": "Returns the statistics for a maintenance job.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 5416,
        "name": "id",
        "description": "ID of the maintenance job",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "get-statistics-for-one-or-more-jobs": {
    "path": "/api/rest/maintenances/multi/{uuid}/statistics",
    "description": "Returns statistics for one or more job.<p><p>Use Storage service and store IDs of the jobs you want to retrieve the statistics for. Store it as JSON object like this:<pre class='prettyprint'>{'ids' : [1, 5]}</pre>The Storage service will return an UUID to be used in the request parameter.<p><p><b>Note: The service will not cast exception if you pass on a non-existing job id or job id belongs to another network.</b>",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 5485,
        "name": "uuid",
        "description": "UUID for the storage of the multiple job ids.",
        "datatype": "STRING"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "get-task-error-details-for-a-given-maintenance-task-execution-(deprecated)": {
    "path": "/api/rest/maintenances/executions/players/tasks/{task_execution_id}",
    "description": "This service is deprecated",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 5534,
        "name": "task_execution_id",
        "description": "ID of the task execution",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "get-task-executions-for-a-specific-player-job-execution-instance": {
    "path": "/api/rest/maintenances/executions/players/{player_execution_id}/{run}",
    "description": "Returns task executions for a specific player job execution",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 6891,
        "name": "player_execution_id",
        "description": "ID of the player maintenance job execution id",
        "datatype": "INTEGER"
      },
      {
        "id": 6892,
        "name": "run",
        "description": "run number of this execution",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "list-player-groups-that-can-be-assigned-to-the-job": {
    "path": "/api/rest/maintenances/{id}/availablePlayerGroups",
    "description": "Returns one or more player groups's information for players that can be assigned to this job",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 5468,
        "name": "id",
        "description": "Id of the maintenance job",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": [
      {
        "id": 5462,
        "name": "limit",
        "description": "Limit search result",
        "defaultValue": "10",
        "datatype": "INTEGER"
      },
      {
        "id": 5463,
        "name": "offset",
        "description": "Offset is the first index to perform the search. Use this for paging.",
        "defaultValue": "0",
        "datatype": "INTEGER"
      },
      {
        "id": 5464,
        "name": "sort",
        "description": "Comma separated list of fields to sort by. Use - sign (minus sign) to identify the column should be sort by descending.You can use + sign to indicate ascending sort, but remember you need to URL encode the + sign. To avoid URL encoding issue, just leave out the + sign.",
        "defaultValue": "name",
        "datatype": "STRING"
      },
      {
        "id": 5465,
        "name": "filters",
        "description": "One or more filter can be apply with following comparator:<b>eq</b>, <b>ne</b>, <b>ge</b>, <b>le</b>, <b>gt</b>, <b>lt</b>, <b>in</b> and <b>like</b>.<p><p>",
        "sample": "{'name' : {'values':['test%', '%xmas%'], comparator : 'like'}}",
        "datatype": "STRING"
      },
      {
        "id": 5466,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      },
      {
        "id": 5467,
        "name": "search",
        "description": "A string that the user wants to search for.The system will search for player groups with [todo: description search fields] containing that string.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "list-players-with-a-given-job-execution-status-for-this-job": {
    "path": "/api/rest/maintenances/executions/{revUUID}/{run}/players/{status}",
    "description": "Returns one or more players for which the job execution ended in a specified status",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 5439,
        "name": "revUUID",
        "description": "Revision UUID for this job run",
        "datatype": "STRING"
      },
      {
        "id": 5440,
        "name": "run",
        "description": "Run number",
        "datatype": "INTEGER"
      },
      {
        "id": 5441,
        "name": "status",
        "description": "Status of job execution",
        "datatype": "STRING"
      }
    ],
    "queryParameters": [
      {
        "id": 5442,
        "name": "limit",
        "description": "Limit search result",
        "defaultValue": "10",
        "datatype": "INTEGER"
      },
      {
        "id": 5443,
        "name": "offset",
        "description": "Offset is the first index to perform the search. Use this for paging.",
        "defaultValue": "0",
        "datatype": "INTEGER"
      },
      {
        "id": 5444,
        "name": "sort",
        "description": "Comma separated list of fields to sort by. Use - sign (minus sign) to identify the column should be sort by descending.You can use + sign to indicate ascending sort, but remember you need to URL encode the + sign. To avoid URL encoding issue, just leave out the + sign.",
        "defaultValue": "name",
        "datatype": "STRING"
      },
      {
        "id": 5445,
        "name": "filters",
        "description": "One or more filter can be apply with following comparator:<b>eq</b>, <b>ne</b>, <b>ge</b>, <b>le</b>, <b>gt</b>, <b>lt</b>, <b>in</b> and <b>like</b>.<p><p>",
        "sample": "{'name' : {'values':['test%', '%xmas%'], comparator : 'like'}}",
        "datatype": "STRING"
      },
      {
        "id": 5446,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      },
      {
        "id": 5447,
        "name": "search",
        "description": "A string that the user wants to search for.The system will search for player with names or descriptions containing that string.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "list-available-players": {
    "path": "/api/rest/maintenances/{id}/availablePlayers",
    "description": "Returns a list of players available for this job type.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 6866,
        "name": "id",
        "description": "Id of the maintenance job",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": [
      {
        "id": 6860,
        "name": "limit",
        "description": "Limit search result",
        "defaultValue": "10",
        "datatype": "INTEGER"
      },
      {
        "id": 6861,
        "name": "offset",
        "description": "Offset is the first index to perform the search. Use this for paging.",
        "defaultValue": "0",
        "datatype": "INTEGER"
      },
      {
        "id": 6862,
        "name": "sort",
        "description": "Comma separated list of fields to sort by. Use - sign (minus sign) to identify the column should be sort by descending.You can use + sign to indicate ascending sort, but remember you need to URL encode the + sign. To avoid URL encoding issue, just leave out the + sign.",
        "defaultValue": "name",
        "datatype": "STRING"
      },
      {
        "id": 6863,
        "name": "filters",
        "description": "One or more filter can be apply with following comparator:<b>eq</b>, <b>ne</b>, <b>ge</b>, <b>le</b>, <b>gt</b>, <b>lt</b>, <b>in</b> and <b>like</b>.<p><p>",
        "sample": "{'name' : {'values':['test%', '%xmas%'], comparator : 'like'}}",
        "datatype": "STRING"
      },
      {
        "id": 6864,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      },
      {
        "id": 6865,
        "name": "search",
        "description": "A string that the user wants to search for.The system will search for player with names or descriptions containing that string.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "list-maintenance-jobs": {
    "path": "/api/rest/maintenances/",
    "description": "Returns one or more maintenance job's information.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": [
      {
        "id": 5275,
        "name": "limit",
        "description": "Limit search result",
        "defaultValue": "10",
        "datatype": "INTEGER"
      },
      {
        "id": 5276,
        "name": "offset",
        "description": "Offset is the first index to perform the search. Use this for paging.",
        "defaultValue": "0",
        "datatype": "INTEGER"
      },
      {
        "id": 5277,
        "name": "sort",
        "description": "Comma separated list of fields to sort by. Use - sign (minus sign) to identify the column should be sort by descending.You can use + sign to indicate ascending sort, but remember you need to URL encode the + sign. To avoid URL encoding issue, just leave out the + sign.",
        "defaultValue": "name",
        "datatype": "STRING"
      },
      {
        "id": 5278,
        "name": "filters",
        "description": "One or more filter can be apply with following comparator:<b>eq</b>, <b>ne</b>, <b>ge</b>, <b>le</b>, <b>gt</b>, <b>lt</b>, <b>in</b> and <b>like</b>.<p><p>",
        "sample": "{'name' : {'values':['test%', '%xmas%'], comparator : 'like'}}",
        "datatype": "STRING"
      },
      {
        "id": 5279,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      },
      {
        "id": 5280,
        "name": "search",
        "description": "A string that the user wants to search for.The system will search for maintenance jobs with [todo: description search fields] containing that string.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "list-player-groups-for-a-maintenance-job": {
    "path": "/api/rest/maintenances/{id}/playerGroups",
    "description": "Returns information for the players or player groups in a maintenance job. If the players for the job are not selected by the group, the list is not returned, the count is 0",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 6392,
        "name": "id",
        "description": "ID of the maintenance job",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": [
      {
        "id": 6393,
        "name": "limit",
        "description": "Limit search result",
        "defaultValue": "10",
        "datatype": "INTEGER"
      },
      {
        "id": 6394,
        "name": "offset",
        "description": "Offset is the first index to perform the search. Use this for paging.",
        "defaultValue": "0",
        "datatype": "INTEGER"
      },
      {
        "id": 6395,
        "name": "sort",
        "description": "Comma separated list of fields to sort by. Use - sign (minus sign) to identify the column should be sort by descending.You can use + sign to indicate ascending sort, but remember you need to URL encode the + sign. To avoid URL encoding issue, just leave out the + sign.",
        "defaultValue": "name",
        "datatype": "STRING"
      },
      {
        "id": 6396,
        "name": "filters",
        "description": "One or more filter can be apply with following comparator:<b>eq</b>, <b>ne</b>, <b>ge</b>, <b>le</b>, <b>gt</b>, <b>lt</b>, <b>in</b> and <b>like</b>.<p><p>",
        "sample": "{'name' : {'values':['test%', '%xmas%'], comparator : 'like'}}",
        "datatype": "STRING"
      },
      {
        "id": 6397,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      },
      {
        "id": 6398,
        "name": "search",
        "description": "A string that the user wants to search for.The system will search for player with names or descriptions containing that string.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "list-players-for-a-maintenance-job": {
    "path": "/api/rest/maintenances/{id}/players",
    "description": "Returns information for the players or player groups in a maintenance job.  If the players for this job are selected by the group, the list in result page will not be returned, the count is 0.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 5960,
        "name": "id",
        "description": "ID of the maintenance job",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": [
      {
        "id": 5961,
        "name": "limit",
        "description": "Limit search result",
        "defaultValue": "10",
        "datatype": "INTEGER"
      },
      {
        "id": 5962,
        "name": "offset",
        "description": "Offset is the first index to perform the search. Use this for paging.",
        "defaultValue": "0",
        "datatype": "INTEGER"
      },
      {
        "id": 5963,
        "name": "sort",
        "description": "Comma separated list of fields to sort by. Use - sign (minus sign) to identify the column should be sort by descending.You can use + sign to indicate ascending sort, but remember you need to URL encode the + sign. To avoid URL encoding issue, just leave out the + sign.",
        "defaultValue": "name",
        "datatype": "STRING"
      },
      {
        "id": 5964,
        "name": "filters",
        "description": "One or more filter can be apply with following comparator:<b>eq</b>, <b>ne</b>, <b>ge</b>, <b>le</b>, <b>gt</b>, <b>lt</b>, <b>in</b> and <b>like</b>.<p><p>",
        "sample": "{'name' : {'values':['test%', '%xmas%'], comparator : 'like'}}",
        "datatype": "STRING"
      },
      {
        "id": 5965,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      },
      {
        "id": 5966,
        "name": "search",
        "description": "A string that the user wants to search for.The system will search for player with names or descriptions containing that string.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "multi-update--maintenance-jobs": {
    "path": "/api/rest/maintenances/",
    "description": "Update one or more maintenance job's information",
    "operation": "PUT",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": {
      "uuid": "e5a3564a-f20b-4fde-9ccc-583876ea54bc",
      "fields": {
        "description": "SampleMaintenance."
      }
    }
  },
  "remove-multiple-player-groups-from-the-maintenance-job": {
    "path": "/api/rest/maintenances/{id}/playersGroups",
    "description": "Removes multiple player groups from the maintenance job. ",
    "operation": "DELETE",
    "pathParameters": [
      {
        "id": 6434,
        "name": "id",
        "description": "Id of the maintenance job",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "remove-multiple-players-from-the-maintenance-job": {
    "path": "/api/rest/maintenances/{id}/players",
    "description": "Removes multiple players from the maintenance job. ",
    "operation": "DELETE",
    "pathParameters": [
      {
        "id": 6416,
        "name": "id",
        "description": "Id of the maintenance job",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "removes-a-player-from-the-maintenance-job": {
    "path": "/api/rest/maintenances/{id}/players/{playerId}",
    "description": "Removes a player from the maintenance job. ",
    "operation": "DELETE",
    "pathParameters": [
      {
        "id": 6407,
        "name": "id",
        "description": "Id of the maintenance job",
        "datatype": "INTEGER"
      },
      {
        "id": 6408,
        "name": "playerId",
        "description": "Id of the player being removed",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "removes-a-player-group-from-the-maintenance-job": {
    "path": "/api/rest/maintenances/{id}/playerGroups/{playerGroupId}",
    "description": "Removes a player group from the maintenance job. ",
    "operation": "DELETE",
    "pathParameters": [
      {
        "id": 6425,
        "name": "id",
        "description": "Id of the maintenance job",
        "datatype": "INTEGER"
      },
      {
        "id": 6426,
        "name": "playerGroupId",
        "description": "Id of the player group being removed",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "resubmit-maintenancejob": {
    "path": "/api/rest/maintenances/{id}/reSubmit",
    "description": "Resubmit a maintenanceJob with failed players from the parent job. It creates new job with the failed players<p><p>",
    "operation": "POST",
    "pathParameters": [
      {
        "id": 7147,
        "name": "id",
        "description": "ID of the maintenanceJob to be reSubmitted.",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": {
      "description": "Demo.",
      "name": "Test"
    }
  },
  "update-a-maintenance-job": {
    "path": "/api/rest/maintenances/{id}",
    "description": "Update maintenance job based on id.",
    "operation": "PUT",
    "pathParameters": [
      {
        "id": 5378,
        "name": "id",
        "description": "ID of the maintenance job to be updated",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": {
      "jobType": "SCALA",
      "name": "john",
      "created": "John"
    }
  },
  "delete-maintenance-file": {
    "path": "/api/rest/update/{playerType}/{id}",
    "description": "Delete maintenance file.",
    "operation": "DELETE",
    "pathParameters": [
      {
        "id": 7162,
        "name": "playerType",
        "description": "Type of the player",
        "datatype": "STRING"
      },
      {
        "id": 7163,
        "name": "id",
        "description": "id of the update record",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "delete-maintenance-files": {
    "path": "/api/rest/update/multi/{playerType}/{uuid}",
    "description": "Delete maintenance files.",
    "operation": "DELETE",
    "pathParameters": [
      {
        "id": 7185,
        "name": "playerType",
        "description": "Type of the player",
        "datatype": "STRING"
      },
      {
        "id": 7186,
        "name": "uuid",
        "datatype": "STRING"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "list-available-software-updates-for-a-given-player": {
    "path": "/api/rest/update/{playerType}",
    "description": "Returns the list of uploaded software updates.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 7183,
        "name": "playerType",
        "description": "Type of the player",
        "datatype": "STRING"
      }
    ],
    "queryParameters": [
      {
        "id": 7177,
        "name": "limit",
        "description": "Limit search result",
        "defaultValue": "10",
        "datatype": "INTEGER"
      },
      {
        "id": 7178,
        "name": "offset",
        "description": "Offset is the first index to perform the search. Use this for paging.",
        "defaultValue": "0",
        "datatype": "INTEGER"
      },
      {
        "id": 7179,
        "name": "sort",
        "description": "Comma separated list of fields to sort by. Use - sign (minus sign) to identify the column should be sort by descending.You can use + sign to indicate ascending sort, but remember you need to URL encode the + sign. To avoid URL encoding issue, just leave out the + sign.",
        "defaultValue": "name",
        "datatype": "STRING"
      },
      {
        "id": 7180,
        "name": "filters",
        "description": "One or more filter can be apply with following comparator:<b>eq</b>, <b>ne</b>, <b>ge</b>, <b>le</b>, <b>gt</b>, <b>lt</b>, <b>in</b> and <b>like</b>.<p><p>",
        "sample": "{'name' : {'values':['test%', '%xmas%'], comparator : 'like'}}",
        "datatype": "STRING"
      },
      {
        "id": 7181,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      },
      {
        "id": 7182,
        "name": "search",
        "description": "A string that the user wants to search for.The system will search for maintenance jobs with [todo: description search fields] containing that string.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "returns-a-software-update-for-a-given-player-type-and-with-a-supplied-id": {
    "path": "/api/rest/update/{playerType}/{id}",
    "description": "Returns the list of uploaded software updates.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 7159,
        "name": "playerType",
        "description": "Type of the player",
        "datatype": "STRING"
      },
      {
        "id": 7160,
        "name": "id",
        "description": "id of the update record",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "create-media": {
    "path": "/api/rest/media/",
    "description": "Create new media.<p><p><b>Note:</b> Name is unique for HTML media type.<p><p>Media needs to be uploaded into Content Manager, however you can't upload HTML media type.<p>This service allow you to create new HTML media. Here is an example of request body for creating new HTML media.<p><p>The <i>name</i>, <i>URI</i> and <i>mediaType</i> attributes are required. In this sample, we'll name the media 'Scala Home' and let URI be 'http://www.scala.com'<p><pre class='prettyprint'>{name : 'Scala Home',uri : 'http://www.scala.com',mediaType : 'HTML'}</pre>",
    "operation": "POST",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": {"name":"ScalaHome","uri":"http://www.scala.com","mediaType":"HTML"}
  },
  "delete-media-by-filters": {
    "path": "/api/rest/media/",
    "description": "Delete one or several media using filters.<p><p>The server returns number of media deleted.<p><p><b><font color='red'>WARNING: Leaving query parameter 'filter' empty will delete all media!</font></b>",
    "operation": "DELETE",
    "pathParameters": null,
    "queryParameters": [
      {
        "id": 7366,
        "name": "filters",
        "description": "One or more filter can be apply with following comparator:<b>eq</b>, <b>ne</b>, <b>ge</b>, <b>le</b>, <b>gt</b>, <b>lt</b>, <b>in</b>, <b>empty</b>, <b>notEmpty</b> and <b>like</b>.<p><p>",
        "sample": "{'id' : {'values':[2,10,14], comparator : 'in'}}",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "delete-media-by-id": {
    "path": "/api/rest/media/{id}",
    "description": "Delete media by id. If you want to delete more than one media, you can use delete media by filters service.",
    "operation": "DELETE",
    "pathParameters": [
      {
        "id": 7368,
        "name": "id",
        "description": "ID of the media to be deleted",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "find-media-by-id": {
    "path": "/api/rest/media/{id}",
    "description": "Returns information about the media.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 7343,
        "name": "id",
        "description": "ID of the media to be fetched",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": [
      {
        "id": 7344,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "find-medias-categories": {
    "path": "/api/rest/media/{id}/categories",
    "description": "List all categories for a media.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 7709,
        "name": "id",
        "description": "ID of the media to be fetched",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "find-medias-workgroups": {
    "path": "/api/rest/media/{id}/workgroups",
    "description": "List all workgroups for a media.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 7702,
        "name": "id",
        "description": "ID of the media to be fetched",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "find-messages-using-the-media": {
    "path": "/api/rest/media/{id}/usingMessages",
    "description": "Returns one or more Message's information.<p><p>This service find all messages using the given media.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 7777,
        "name": "id",
        "description": "ID of the media.",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "generate-thumbnail": {
    "path": "/api/rest/templates/{mediaId}/thumbnail",
    "description": "Generate thumbnail for a template. Thumbnail generation is done asynchroniously on the server, therefore the service will return UUID where you can use it to check for completeness.",
    "operation": "POST",
    "pathParameters": [
      {
        "id": 15964,
        "name": "mediaId",
        "description": "ID of the media to generate thumbnail",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "get-thumbnail-status": {
    "path": "/api/rest/templates/{uuid}/thumbnailStatus",
    "description": "Returns the status of the thumbnail generation operation and the paths of the thumbnail files",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 15956,
        "name": "uuid",
        "description": "uuid for the thumbnail generation operation.",
        "datatype": "STRING"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "get-thumbnail-status-by-media-id": {
    "path": "/api/rest/media/thumbnailStatus/{id}",
    "description": "Returns the status of the thumbnail generation operation and the paths of the thumbnail files",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 7737,
        "name": "id",
        "description": "uuid for the thumbnail generation operation.",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "get-usage-for-media": {
    "path": "/api/rest/media/usage",
    "description": "Returns counts of messages, playlists, and templates using media items specified in parameters.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": [
      {
        "id": 7707,
        "name": "ids",
        "description": "Comma separated list of media's ids for which usage should be calculated.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "list-media": {
    "path": "/api/rest/media/",
    "description": "Returns one or more media's information.<p><p>Filters:<p><ul><li> <i>Media with any workgroup</i>:</li><pre class='prettyprint linenums'>filters = {workgroups : {values : ['anyAssigned']}}</pre><li> <i>Media with <b>no</b> workgroup</i>:</li><pre class='prettyprint linenums'>filters = {workgroups : {values : ['notAssigned']}}</pre></ul>",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": [
      {
        "id": 7547,
        "name": "limit",
        "description": "Limit search result. Set limit to 0 if you want to retrieve all.",
        "defaultValue": "10",
        "datatype": "INTEGER"
      },
      {
        "id": 7548,
        "name": "offset",
        "description": "Offset is the first index to perform the search. Use this for paging.",
        "defaultValue": "0",
        "datatype": "INTEGER"
      },
      {
        "id": 7549,
        "name": "sort",
        "description": "Comma separated list of fields to sort by. Use - sign (minus sign) to identify the column should be sort by descending.You can use + sign to indicate ascending sort, but remember you need to URL encode the + sign. To avoid URL encoding issue, just leave out the + sign.",
        "defaultValue": "name",
        "datatype": "STRING"
      },
      {
        "id": 7550,
        "name": "filters",
        "description": "One or more filter can be apply with following comparator:<b>eq</b>, <b>ne</b>, <b>ge</b>, <b>le</b>, <b>gt</b>, <b>lt</b>, <b>in</b> and <b>like</b>.<p><p> <b>Note:</b> Added filter for metadata.1. We just support 'eq' as a comparator for metadata.2. If you want to search based on metadata or meta value you have to privide Id's of it.The sample filter below will list down all the media where metadata id is 1 <b>OR</b> metavalues in (1,2) , if type of metadata is boolean <b>OR</b> ValueTypeEnum is ANY then no need to pass metaValues. You can refer sample for more details.",
        "sample": "{name : {values:['test%', '%xmas%'], comparator : 'like'}}  or  {metadata: { metaValues:[{ id : 1 , // ID 1 is a String metadata.values : ['Hello'] }] }}{metadata: { metaValues:[{ id : 9 , // ID 9 is a Integer metadata.values : ['2323'] // Note: the value is in String format, even the metadata is defined as Integer. }] }}{metadata: { metaValues:[{ id : 20  // ID 20 is a Boolean. Since we can only find for 'On' it's no need to pass on values attribute. }] }}{// Combine the search with more than one metadata. Note the 2nd values search for item with 'Oslo' or 'New York'. metadata: { metaValues:[{ id : 20 }, { id : 1, values : ['Oslo', 'New York'] }] }}{metadata: { metaValues:[{ id : 5 , // ID 5 is a picklist metadata picklistId : 13 // picklist value ID }] }}",
        "datatype": "STRING"
      },
      {
        "id": 7551,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      },
      {
        "id": 7552,
        "name": "search",
        "description": "A string that the user wants to search for.The system will search for media items with names or descriptions containing that string.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "list-media-types": {
    "path": "/api/rest/media/types/{filter}",
    "description": "Returns list of media types the server supports.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 7700,
        "name": "filters",
        "description": "type of media to filter the media types:<b>media</b>, <b>audio</b>, <b>data</b>.<p><p>",
        "sample": "type",
        "datatype": "STRING"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "multi-update-media": {
    "path": "/api/rest/media/multi/{uuid}",
    "description": "Update one or more media.",
    "operation": "PUT",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": {
      "item": {
        "description": "Canbeusedeveryweekend."
      }
    }
  },
  "restore-previous-revision": {
    "path": "/api/rest/templates/{id}/revision/{mediaItemFileId}",
    "description": "Restore prvious as current.",
    "operation": "POST",
    "pathParameters": [
      {
        "id": 15959,
        "name": "id",
        "description": "ID of the template to be modified",
        "datatype": "INTEGER"
      },
      {
        "id": 15960,
        "name": "mediaItemFileId",
        "description": "From Template DTO you will get a list of media item files, the ID is one of those files. You can't set the top most file as current revision.",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "update-single-media": {
    "path": "/api/rest/media/{id}",
    "description": "Update media.<p><p><span class='label label-info'>Note:</span><ul><li> For adding workgroups to a media, you only need to pass on workgroup-id and owner attribute. By default, owner attribute is 'false'.</li>    example, adding workgroup 9 as owner and 2 as viewer:<pre class='prettyprint linenums'>      {workgroups: [{id:9, owner:true}, {id:2}]}</pre><li> For adding categories to a media, you only need to pass on categori-id</li>    example, adding category 3, 9 and 21:<pre class='prettyprint linenums'>      {categories: [{id:3}, {id:9}, {id:21}]}</pre><li> For request user with ID 8 to approve the media. </li><pre class='prettyprint'>    example:{approval: {action : 'REQUEST',userId : 8}}</pre><li> For request approval from any user with access to the media. </li><pre class='prettyprint'>    example:{approval: {action : 'REQUEST'}}</pre><li> For approve the media yourself.</li><pre class='prettyprint'>    example:{approval: {action : 'APPROVE'}}</pre><li> For approve the media by a user with ID 7.</li><pre class='prettyprint'>    example:{approval: {action : 'APPROVE',userId : 7}}</pre></ul>",
    "operation": "PUT",
    "pathParameters": [
      {
        "id": 7663,
        "name": "id",
        "description": "ID of the media to be updated",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": {
      "audioDucking": "true",
      "description": "Thismediacanbeplayatweekend"
    }
  },
  "add-picklist-values-to-media-metadata": {
    "path": "/api/rest/metadata/multiple/{metadataId}",
    "description": "Add Pick List values to Media Metadata.<p><p><span class='label label-info'>Note:</span>",
    "operation": "PUT",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": {
      "id": "2",
      "predefinedValues": [
        {
          "id": "1",
          "sortOrder": "1",
          "value": "samplepickvalue1"
        },
        {
          "id": "2",
          "sortOrder": "2",
          "value": "samplepickvalue2"
        }
      ]
    }
  },
  "create-metadata": {
    "path": "/api/rest/metadata/",
    "description": "Create new metadata.",
    "operation": "POST",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": {
      "datatype": "STRING",
      "name": "thenamemetadata",
      "valueType": "PICKLIST"
    }
  },
  "delete-metadata-by-id": {
    "path": "/api/rest/metadata/{id}",
    "description": "Delete metadata by id. If you want to delete more than one metadata, you can use delete metadata by filters service",
    "operation": "DELETE",
    "pathParameters": [
      {
        "id": 8118,
        "name": "id",
        "description": "ID of the metadata to be deleted",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "find-metadata-by-id": {
    "path": "/api/rest/metadata/{id}",
    "description": "Returns information about the metadata.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 8115,
        "name": "id",
        "description": "ID of the metadata to be fetched",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": [
      {
        "id": 8116,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "list-picklist-values-by-metadata-id": {
    "path": "/api/rest/playerMetadata/{metadataId}/pickListValues",
    "description": "Returns information about the picklist values.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 12039,
        "name": "metadataId",
        "description": "ID of the Metadata to list the picklist values",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "list-metadata": {
    "path": "/api/rest/metadata/",
    "description": "Returns one or more metadata's information.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": [
      {
        "id": 8173,
        "name": "limit",
        "description": "Limit search result",
        "defaultValue": "10",
        "datatype": "INTEGER"
      },
      {
        "id": 8174,
        "name": "offset",
        "description": "Offset is the first index to perform the search. Use this for paging.",
        "defaultValue": "0",
        "datatype": "INTEGER"
      },
      {
        "id": 8175,
        "name": "sort",
        "description": "Comma separated list of fields to sort by. Use - sign (minus sign) to identify the column should be sort by descending.You can use + sign to indicate ascending sort, but remember you need to URL encode the + sign. To avoid URL encoding issue, just leave out the + sign.",
        "defaultValue": "name",
        "datatype": "STRING"
      },
      {
        "id": 8176,
        "name": "filters",
        "description": "One or more filter can be apply with following comparator:<b>eq</b>, <b>ne</b>, <b>ge</b>, <b>le</b>, <b>gt</b>, <b>lt</b>, <b>in</b> and <b>like</b>.<p><p>",
        "sample": "{'name' : {'values':['test%', '%xmas%'], comparator : 'like'}}",
        "datatype": "STRING"
      },
      {
        "id": 8177,
        "name": "search",
        "description": "A string that the user wants to search for.The system will search for metadata with [todo: description search fields] containing that string.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "update-media-metadata": {
    "path": "/api/rest/metadata/{id}",
    "description": "Update Media Metadata.<p><p><span class='label label-info'>Note:</span>",
    "operation": "PUT",
    "pathParameters": [
      {
        "id": 8197,
        "name": "id",
        "description": "ID of the Media Metadata to be updated",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": {
      "name": "DemoforMediaMetadata"
    }
  },
  "update-the-sort-order-of-the-media-metadata-variables-in-the-current-network": {
    "path": "/api/rest/metadata/multi/{id}",
    "description": "Update the sort order of one or more media metadata in the current network.",
    "operation": "PUT",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": {
      "metadataVariables": [
        {
          "id": "1",
          "order": "12"
        },
        {
          "id": "2",
          "order": "13"
        }
      ]
    }
  },
  "create-message": {
    "path": "/api/rest/messages/",
    "description": "Create new message.<p><p>Here are a few samples of request body for creating new message.<ul><li>Create a message:</li></ul>The service needs to know which template you want to use. In this sample, we'll use template with ID 1.<p>This sample assume all template fields are <b>not</b> required.<pre class='prettyprint'>{name : 'My Message',description : 'A demo message',template : {id : 1}}</pre><ul><li>Create a message with categories and workgroups:</li></ul>This sample assume all template fields are <b>not</b> required. It also assume you belong to workgroup with ID 3 or you don't belong to any workgroup.<pre class='prettyprint'>{name : 'My Message',description : 'A demo message with workgroups and categories',template : {id : 1}, categories : [{id : 1}, {id : 2}], workgroups : [{id : 3, owner : true}, {id : 4}]}</pre><ul><li>Create a message with fields:</li></ul>The service needs to know which template you want to use. In this sample, we'll use template with ID 1.<p>We also assume the template has 3 fields; <i>title</i>, <i>header</i> and <i>body</i>.<pre class='prettyprint'>{name : 'My Message with 3 fields',description : 'A demo message with 3 fields',template : {id : 1},fields : [{name : 'title',value : 'Welcome'},{name : 'header',value : 'Scala',},{name : 'body',value : 'This is a message created with API'}]}</pre>",
    "operation": "POST",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": {
      "name": "Mymessgae",
      "description": "DescriptionforMessage",
      "template": {
        "id": "1"
      }
    }
  },
  "delete-message-by-id-(deprecated)": {
    "path": "/api/rest/messages/{id}",
    "description": "This service is deprecated, use delete service in Media API.",
    "operation": "DELETE",
    "pathParameters": [
      {
        "id": 8298,
        "name": "id",
        "description": "ID of the message to be deleted",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "duplicate-message": {
    "path": "/api/rest/messages/{messageId}/duplicate",
    "description": "Duplicate message.",
    "operation": "POST",
    "pathParameters": [
      {
        "id": 8400,
        "name": "messageId",
        "description": "Id of the message to be duplicated",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "find-message-by-id": {
    "path": "/api/rest/messages/{id}",
    "description": "Returns information about the message.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 8295,
        "name": "id",
        "description": "ID of the message to be fetched",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": [
      {
        "id": 8296,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "generate-thumbnails-for-in-memory-message": {
    "path": "/api/rest/messages/thumbnailInMemory",
    "description": "Generate thumbnails for in-memory message. <p><p>This method should be called to generate thumbnails for message preview, on the message editor.<p><p>",
    "operation": "PUT",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": {
      "name": "Mymessgae",
      "description": "DescriptionforMessage",
      "template": {
        "id": "1"
      }
    }
  },
  "get-media-info-for-a-message": {
    "path": "/api/rest/messages/{id}/mediainfo",
    "description": "Return size, Dimensions and duration.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 8632,
        "name": "id",
        "description": "ID of the message",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "list-messages": {
    "path": "/api/rest/messages/",
    "description": "Returns one or more Message's information.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": [
      {
        "id": 8552,
        "name": "limit",
        "description": "Limit search result",
        "defaultValue": "10",
        "datatype": "INTEGER"
      },
      {
        "id": 8553,
        "name": "offset",
        "description": "Offset is the first index to perform the search. Use this for paging.",
        "defaultValue": "0",
        "datatype": "INTEGER"
      },
      {
        "id": 8554,
        "name": "sort",
        "description": "Comma separated list of fields to sort by. Use - sign (minus sign) to identify the column should be sort by descending.You can use + sign to indicate ascending sort, but remember you need to URL encode the + sign. To avoid URL encoding issue, just leave out the + sign.",
        "defaultValue": "name",
        "datatype": "STRING"
      },
      {
        "id": 8555,
        "name": "filters",
        "description": "One or more filter can be apply with following comparator:<b>eq</b>, <b>ne</b>, <b>ge</b>, <b>le</b>, <b>gt</b>, <b>lt</b>, <b>in</b> and <b>like</b>.<p><p>",
        "sample": "{'name' : {'values':['test%', '%xmas%'], comparator : 'like'}}",
        "datatype": "STRING"
      },
      {
        "id": 8556,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      },
      {
        "id": 8557,
        "name": "search",
        "description": "A string that the user wants to search for.The system will search for messages with [todo: description search fields] containing that string.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "multi-update-messages": {
    "path": "/api/rest/messages/",
    "description": "Update one or more messages.",
    "operation": "PUT",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": {
      "uuid": "e5a3564a-f20b-4fde-9ccc-583876ea54bc",
      "fields": {
        "description": "TextMessage."
      }
    }
  },
  "update-message": {
    "path": "/api/rest/messages/{id}",
    "description": "Update message.<p><p><span class='label label-info'>Note:</span><ul><li> For adding workgroups to a message, you only need to pass on workgroup-id and owner attribute. By default, owner attribute is 'false'.</li>    example, adding workgroup 9 as owner and 2 as viewer:<pre class='prettyprint linenums'>      {workgroups: [{id:9, owner:true}, {id:2}]}</pre><li> For adding categories to a message, you only need to pass on categori-id</li>    example, adding category 3, 9 and 21:<pre class='prettyprint linenums'>      {categories: [{id:3}, {id:9}, {id:21}]}</pre><li> For request user with ID 8 to approve the message. </li><pre class='prettyprint'>    example:{approval: {action : 'REQUEST',userId : 8}}</pre><li> For request approval from any user with access to the message. </li><pre class='prettyprint'>    example:{approval: {action : 'REQUEST'}}</pre><li> For approve the message yourself.</li><pre class='prettyprint'>    example:{approval: {action : 'APPROVE'}}</pre><li> For approve the message by a user with ID 7.</li><pre class='prettyprint'>    example:{approval: {action : 'APPROVE',userId : 7}}</pre></ul>",
    "operation": "PUT",
    "pathParameters": [
      {
        "id": 8625,
        "name": "id",
        "description": "ID of the message to be updated",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": {
      "name": "MyMessage"
    }
  },
  "getsnapshotstatus": {
    "path": "/api/rest/messages/{messageId}/snapshot",
    "description": "Returns the status of the snapshot generation operation",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 8720,
        "name": "messageId",
        "description": "ID of the message",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "get-network-id-by-name": {
    "path": "/api/rest/misc/network/{name}",
    "description": "Returns network ID.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 8752,
        "name": "name",
        "description": "Name of the network to be fetched",
        "datatype": "STRING"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "get-production-information": {
    "path": "/api/rest/misc/productinfo",
    "description": "Returns information about the production.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": null
  },
  "get-server-time": {
    "path": "/api/rest/misc/time",
    "description": "Returns information about server time.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": null
  },
  "create-first-network": {
    "path": "/api/rest/networks/first",
    "description": "Create first network.<p><p><b>Note:</b> This service can only be called by build-in administrator from localhost and the server doesn't contain any network.",
    "operation": "POST",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": {
      "name": "Scala"
    }
  },
  "get-network-information": {
    "path": "/api/rest/networks/{id}",
    "description": "Returns information about the network.<p><p><b>NOTE:</b> Only super-administrator is allowed to retrieve <i>any</i> network by ID. For other users, they are only allowed to retrieve their own network.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 8798,
        "name": "id",
        "description": "ID of the network to be fetched",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": [
      {
        "id": 8799,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "update-network-settings": {
    "path": "/api/rest/networks/{id}",
    "description": "Update network settings",
    "operation": "PUT",
    "pathParameters": [
      {
        "id": 8839,
        "name": "id",
        "description": "ID of the Network to be updated",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": {
      "description": "Demo.",
      "active": "True"
    }
  },
  "get-reporting-database-configuration": {
    "path": "/api/rest/pamdDbConfig/",
    "description": "Returns information about the reporting database configuration.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": null
  },
  "is-reporting-database-is-configured-?": {
    "path": "/api/rest/pamdDbConfig/isDbConfigured",
    "description": "Returns 'true' or 'false' based on reporting database configuration",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": null
  },
  "save-the-reporting-database-configuration-details": {
    "path": "/api/rest/pamdDbConfig/",
    "description": "Save the reporting database configuration details",
    "operation": "POST",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": {"type":"PostgreSQL","hostName":"localhost","port":"5432","schema":"pam","username":"postgres","password":"scala","connectionOtions":"charSet=UTF-8","maxPoolSize":"20","minPoolSize":"5","poolTimeout":"60","poolIdleTest":"55"}
  },
  "report-plan-status-as-xml": {
    "path": "/api/rest/planstatus/xml",
    "description": "Report planstatus.<p><p>This service allow the player to report plan status in XML as it has been done in Scala PC player.",
    "operation": "POST",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": {
      "xml": "...",
      "base64Encoded": "true"
    }
  },
  "clear-player-errors": {
    "path": "/api/rest/players/clearErrors/{uuid}",
    "description": "Clear errors for one or more player.<p><p>Use Storage service and store IDs of the players you want to clear the errors Store it as JSON object like this:<pre class='prettyprint'>{'ids' : [1, 5]}</pre>The Storage service will return an UUID to be used in the request parameter.",
    "operation": "DELETE",
    "pathParameters": [
      {
        "id": 10986,
        "name": "uuid",
        "description": "UUID representation of one or more player ID.",
        "datatype": "STRING"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "create-multiple-players": {
    "path": "/api/rest/players/multiPlayer",
    "description": "Create one or many player.",
    "operation": "POST",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": {"name":"MyPlayer1,MyPlayer2","playerType":"SCALA"}
  },
  "create-player": {
    "path": "/api/rest/players/",
    "description": "Create player. <p><b>Note</b>: Assigning player metadata to a player:Use the <b>List service of Player Metadata</b> to find out the id of the Metadata and then pass that id to set the metadata value in player. Consider a scenario where a boolean player metadata 'testBoolean' has been created. Now, To assigne the metadata 'testBoolean' to a player weneed to find the id of the metadata. The id of the metadata can be found using 'List Player metadata service' let's say it is '1'. So, the metadtametadataValue object will look like this:</p> {metadataValue: [{value: TRUE, playerMetadata:{id : 1 ,name : 'testBoolean', datatype : BOOLEAN, valueType : ANY}}]} The value attribute of 'metadataValue' object is set to 'TRUE' here.",
    "operation": "POST",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": {"name":"MyPlayer","description":"DescriptionforPlayer","unusedFilesCache":"24","downloadThreads":"1","type":"SCALA","metadataValue":[{"value":"TRUE","playerMetadata":{"id":"metadataid","datatype":"BOOLEAN","valueType":"ANY"}}]}
  },
  "delete-player-by-filters": {
    "path": "/api/rest/players/",
    "description": "Delete one or several players using filters.<p><p>The server returns number of players deleted.<p><p><b><font color='red'>WARNING: Leaving query parameter 'filter' empty will delete all players!</font></b>",
    "operation": "DELETE",
    "pathParameters": null,
    "queryParameters": [
      {
        "id": 9327,
        "name": "filters",
        "description": "One or more filter can be apply with following comparator:<b>eq</b>, <b>ne</b>, <b>ge</b>, <b>le</b>, <b>gt</b>, <b>lt</b>, <b>in</b> and <b>like</b>.<p><p>",
        "sample": "{'id' : {'values':[2,10,14], comparator : 'in'}}",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "delete-player-by-id": {
    "path": "/api/rest/players/{id}",
    "description": "Delete player by id. If you want to delete more than one player, you can use delete player by filters service.",
    "operation": "DELETE",
    "pathParameters": [
      {
        "id": 9313,
        "name": "id",
        "description": "ID of the player to be deleted",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "find-player-by-id": {
    "path": "/api/rest/players/{id}",
    "description": "Returns information about the player.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 9310,
        "name": "id",
        "description": "ID of the player to be fetched",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": [
      {
        "id": 9311,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "generate-new-pairing-key": {
    "path": "/api/rest/players/newPairingKey/{id}",
    "description": "Generate new pairing key. This service only applies for Scala Samsung Players. The service returns the new pairing key.",
    "operation": "PUT",
    "pathParameters": [
      {
        "id": 11609,
        "name": "id",
        "description": "ID of the player to have new pairing key.",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "get-current-state-for-a-player": {
    "path": "/api/rest/players/{id}/state",
    "description": "Returns information about the current state of a player.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 11251,
        "name": "id",
        "description": "ID of the player to be fetched",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "get-current-state-for-one-or-more-player": {
    "path": "/api/rest/players/{uuid}/states",
    "description": "Returns information about the current state of one or more player.<p><p>Use Storage service and store IDs of the players you want to retrieve the state. Store it as JSON object like this:<pre class='prettyprint'>{'ids' : [1, 5]}</pre>The Storage service will return an UUID to be used in the request parameter.<p><p><b>Note: The service will not cast exception if you pass on a non-existing player id or player id belongs to another network.</b>",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 11285,
        "name": "uuid",
        "description": "UUID representation of one or more player ID.",
        "datatype": "STRING"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "get-player-logs": {
    "path": "/api/rest/players/{id}/logs",
    "description": "Get player logs.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 11606,
        "name": "id",
        "description": "ID of the player to be fetched",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "get-player-plans": {
    "path": "/api/rest/players/{id}/plans",
    "description": "Get player plans for player and returns the list of player plan objects.<p><p>",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 11615,
        "name": "id",
        "description": "ID of the player for which the player plans to be fetched",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "get-player-version": {
    "path": "/api/rest/players/{id}/version",
    "description": "Active running player reports software version to Content Manager. This service will throw an API Exception if the player hasn't report such information.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 11640,
        "name": "id",
        "description": "ID of the player to be fetched",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "list-ex-module-licenses": {
    "path": "/api/rest/players/modules",
    "description": "List of EX Modules licenses.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": null
  },
  "list-players-inventory": {
    "path": "/api/rest/players/{id}/inventory",
    "description": "Returns a list of player's inventory.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 11446,
        "name": "id",
        "description": "ID of the player to be fetched",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": [
      {
        "id": 11447,
        "name": "limit",
        "description": "Limit search result",
        "defaultValue": "10",
        "datatype": "INTEGER"
      },
      {
        "id": 11448,
        "name": "offset",
        "description": "Offset is the first index to perform the search. Use this for paging.",
        "defaultValue": "0",
        "datatype": "INTEGER"
      },
      {
        "id": 11449,
        "name": "sort",
        "description": "Comma separated list of fields to sort by. Use - sign (minus sign) to identify the column should be sort by descending.You can use + sign to indicate ascending sort, but remember you need to URL encode the + sign. To avoid URL encoding issue, just leave out the + sign.",
        "defaultValue": "name",
        "datatype": "STRING"
      },
      {
        "id": 11450,
        "name": "filters",
        "description": "One or more filter can be apply with following comparator:<b>eq</b>, <b>ne</b>, <b>ge</b>, <b>le</b>, <b>gt</b>, <b>lt</b>, <b>in</b> and <b>like</b>.<p><p>",
        "sample": "{'name' : {'values':['test%', '%xmas%'], comparator : 'like'}}",
        "datatype": "STRING"
      },
      {
        "id": 11451,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      },
      {
        "id": 11452,
        "name": "search",
        "description": "A string that the user wants to search for.The system will search for playerinventory with names containing that string.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "list-player-licenses": {
    "path": "/api/rest/players/licenses",
    "description": "Returns a list of player license.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": null
  },
  "list-player-versions": {
    "path": "/api/rest/players/versions",
    "description": "Active running players report their software version to Content Manager. This list contains information about software version for those players.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": null
  },
  "list-players": {
    "path": "/api/rest/players/",
    "description": "Returns one or more player's information.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": [
      {
        "id": 10550,
        "name": "limit",
        "description": "Limit search result",
        "defaultValue": "10",
        "datatype": "INTEGER"
      },
      {
        "id": 10551,
        "name": "offset",
        "description": "Offset is the first index to perform the search. Use this for paging.",
        "defaultValue": "0",
        "datatype": "INTEGER"
      },
      {
        "id": 10552,
        "name": "sort",
        "description": "Comma separated list of fields to sort by. Use - sign (minus sign) to identify the column should be sort by descending.You can use + sign to indicate ascending sort, but remember you need to URL encode the + sign. To avoid URL encoding issue, just leave out the + sign.",
        "defaultValue": "name",
        "datatype": "STRING"
      },
      {
        "id": 10553,
        "name": "filters",
        "description": "One or more filter can be apply with following comparator:<b>eq</b>, <b>ne</b>, <b>ge</b>, <b>le</b>, <b>gt</b>, <b>lt</b>, <b>in</b> and <b>like</b>.<p><p> <b>Note:</b> Added filter for metadata.1. We just support 'eq' as a comparator for metadata.2. If you want to search based on metadata or meta value you have to privide Id's of it.The sample filter below will list down all the players where metadata id is 1 <b>OR</b> metavalues in (1,2) , if type of metadata is boolean <b>OR</b> ValueTypeEnum is ANY then no need to pass metaValues. You can refer sample for more details.",
        "sample": "{name : {values:['test%', '%xmas%'], comparator : 'like'}}  or  {metadata: { metaValues:[{ id : 1 , // ID 1 is a String metadata.values : ['Hello'] }] }}{metadata: { metaValues:[{ id : 9 , // ID 9 is a Integer metadata.values : ['2323'] // Note: the value is in String format, even the metadata is defined as Integer. }] }}{metadata: { metaValues:[{ id : 20  // ID 20 is a Boolean. Since we can only find for 'On' it's no need to pass on values attribute. }] }}{// Combine the search with more than one metadata. Note the 2nd values search for item with 'Oslo' or 'New York'. metadata: { metaValues:[{ id : 20 }, { id : 1, values : ['Oslo', 'New York'] }] }}{metadata: { metaValues:[{ id : 5 , // ID 5 is a picklist metadata picklistId : 13 // picklist value ID }] }}",
        "datatype": "STRING"
      },
      {
        "id": 10554,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      },
      {
        "id": 10555,
        "name": "search",
        "description": "A string that the user wants to search for.The system will search for player with names or descriptions containing that string.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "multi-update-players": {
    "path": "/api/rest/players/multi/{uuid}",
    "description": "Update one or more player.",
    "operation": "PUT",
    "pathParameters": [
      {
        "id": 11557,
        "name": "uuid",
        "datatype": "STRING"
      }
    ],
    "queryParameters": null,
    "queryBody": {
      "uuid": "e5a3564a-f20b-4fde-9ccc-583876ea54bc",
      "fields": {
        "description": "SamplePlayer."
      }
    }
  },
  "request-players-logs": {
    "path": "/api/rest/players/{uuid}/requestlog",
    "description": "Request logs for one or more player. Content Manager will send request for logs on the next heartbeat.<p><p>Use Storage service and store IDs of the players you want to clear the errors Store it as JSON object like this:<pre class='prettyprint'>{'ids' : [1, 5]}</pre>The Storage service will return an UUID to be used in the request parameter.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 10992,
        "name": "uuid",
        "description": "UUID representation of one or more player ID.",
        "datatype": "STRING"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "reset-mac-address": {
    "path": "/api/rest/players/resetMAC/{id}",
    "description": "Reset mac address for player and returns the player state object.<p><p>",
    "operation": "PUT",
    "pathParameters": [
      {
        "id": 11597,
        "name": "id",
        "description": "ID of the player to be fetched",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "update-player": {
    "path": "/api/rest/players/{id}",
    "description": "Update player. <p><b>Note</b>: Assigning player metadata to a player: Use the <b>List service of Player Metadata</b> to find out the id of the Metadata and then pass that id to set the metadata value in player Consider a scenario where a boolean player metadata 'testBoolean' has been created. Now, To update the value of the metadata 'testBoolean' for a player we need to find the id of the metadata. The id of the metadata can be found using 'List Player metadata service' let's say it is '1'. So, the metadataValue object will look like this:</p> {metadataValue: [{value: TRUE, playerMetadata:{id : 1 ,name : 'testBoolean', datatype : BOOLEAN, valueType : ANY}}]} The value attribute of 'metadataValue' object is set to 'TRUE' here.",
    "operation": "PUT",
    "pathParameters": [
      {
        "id": 10954,
        "name": "id",
        "description": "ID of the player to be updated",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": {"name":"MyPlayer","description":"DescriptionforPlayer","unusedFilesCache":"24","downloadThreads":"1","metadataValue":[{"value":"TRUE","playerMetadata":{"id":"metadataid","datatype":"BOOLEAN","valueType":"ANY"}}]}
  },
  "create-player-group": {
    "path": "/api/rest/playergroup/",
    "description": "Create new Player Group.<p><p>Here are a few samples of request body for creating Player Group.<ul><li>Create a Sample Player Group:</li></ul><pre class='prettyprint'>{name: 'Sample Player Group',description: 'A demo for Sample Player Group'}</pre>",
    "operation": "POST",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": {
      "name": "SamplePlayerGroup",
      "description": "DemoforSamplePlayerGroup"
    }
  },
  "delete-player-group-by-id": {
    "path": "/api/rest/playergroup/{id}",
    "description": "Delete Player Group by id.",
    "operation": "DELETE",
    "pathParameters": [
      {
        "id": 11653,
        "name": "id",
        "description": "ID of the Player Group to be deleted",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "find-player-group-by-id": {
    "path": "/api/rest/playergroup/{id}",
    "description": "Returns information about the Player Group(variable).",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 11650,
        "name": "id",
        "description": "ID of the Player Group to be fetched",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": [
      {
        "id": 11651,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "get-assigned-for-player-group": {
    "path": "/api/rest/playergroup/usage",
    "description": "Returns counts of players, playlists items assigned to Player Group specified in parameters.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": [
      {
        "id": 11693,
        "name": "ids",
        "description": "Comma separated list of playergroup's ids for which assigned should be calculated.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "list-player-groups": {
    "path": "/api/rest/playergroup/",
    "description": "Returns one or more player groups's information.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": [
      {
        "id": 11675,
        "name": "limit",
        "description": "Limit search result",
        "defaultValue": "10",
        "datatype": "INTEGER"
      },
      {
        "id": 11676,
        "name": "offset",
        "description": "Offset is the first index to perform the search. Use this for paging.",
        "defaultValue": "0",
        "datatype": "INTEGER"
      },
      {
        "id": 11677,
        "name": "sort",
        "description": "Comma separated list of fields to sort by. Use - sign (minus sign) to identify the column should be sort by descending.You can use + sign to indicate ascending sort, but remember you need to URL encode the + sign. To avoid URL encoding issue, just leave out the + sign.",
        "defaultValue": "name",
        "datatype": "STRING"
      },
      {
        "id": 11678,
        "name": "filters",
        "description": "One or more filter can be apply with following comparator:<b>eq</b>, <b>ne</b>, <b>ge</b>, <b>le</b>, <b>gt</b>, <b>lt</b>, <b>in</b> and <b>like</b>.<p><p>",
        "sample": "{'name' : {'values':['test%', '%xmas%'], comparator : 'like'}}",
        "datatype": "STRING"
      },
      {
        "id": 11679,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      },
      {
        "id": 11680,
        "name": "search",
        "description": "A string that the user wants to search for.The system will search for player groups with [todo: description search fields] containing that string.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "multi-update-player-groups": {
    "path": "/api/rest/playergroup/",
    "description": "Update one or more Player Groups.",
    "operation": "PUT",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": {
      "uuid": "e5a3564a-f20b-4fde-9ccc-583876ea54bc",
      "fields": {
        "description": "SamplePlayerGroup."
      }
    }
  },
  "update-player-group": {
    "path": "/api/rest/playergroup/{id}",
    "description": "Update Player Group.<p><p><span class='label label-info'>Note:</span>",
    "operation": "PUT",
    "pathParameters": [
      {
        "id": 11688,
        "name": "id",
        "description": "ID of the Player Group to be updated",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": {
      "description": "SamplePlayerGroup",
      "name": "DemoforSamplePlayerGroup"
    }
  },
  "clear-all-problems": {
    "path": "/api/rest/playerhealth/clearProblems",
    "description": "Clear all the problems.<p><p>",
    "operation": "DELETE",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": null
  },
  "clear-problems": {
    "path": "/api/rest/playerhealth/clearProblems/{uuid}",
    "description": "Clear one or more problems.<p><p>Use Storage service and store IDs of the network error you want to clearStore it as JSON object like this:<pre class='prettyprint'>{'ids' : [1, 5]}</pre>The Storage service will return an UUID to be used in the request parameter.<p><p><b>Note: The service will not cast exception if you pass on a non-existing network error id or network error id belongs to another network.</b>",
    "operation": "DELETE",
    "pathParameters": [
      {
        "id": 11930,
        "name": "uuid",
        "description": "UUID representation of one or more network error ID.",
        "datatype": "STRING"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "clear-problems-by-problem-number": {
    "path": "/api/rest/playerhealth/clearProblemsByProblemNumber/{uuid}",
    "description": "Clear one or more problems by problem number.<p><p>Use Storage service and store problem number of the network error you want to clearStore it as JSON object like this:<pre class='prettyprint'>{'ids' : [1, 5]}</pre>The Storage service will return an UUID to be used in the request parameter.<p><p><b>Note: The service will not cast exception if you pass on a non-existing problem number.</b>",
    "operation": "DELETE",
    "pathParameters": [
      {
        "id": 11928,
        "name": "uuid",
        "description": "UUID representation of one or more problem number",
        "datatype": "STRING"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "find-player-health-information-by-id": {
    "path": "/api/rest/playerhealth/{id}",
    "description": "Returns information about the player health.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 11730,
        "name": "id",
        "description": "ID of the player health to be fetched",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": [
      {
        "id": 11731,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "find-player-health-settings-by-network-id": {
    "path": "/api/rest/playerhealth/settings/{id}",
    "description": "Returns information about the player health settings.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 11868,
        "name": "id",
        "description": "ID of the account to be fetched",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "get--player-health-information": {
    "path": "/api/rest/playerhealth/state/{id}",
    "description": "Returns player health information.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 11821,
        "name": "id",
        "description": "ID of the player health to be fetched",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "get-player-health-information": {
    "path": "/api/rest/playerhealth/states/{uuid}",
    "description": "Returns player health information.<p><p>Use Storage service and store IDs of the player health you want to retrieve the state. Store it as JSON object like this:<pre class='prettyprint'>{'ids' : [1, 5]}</pre>The Storage service will return an UUID to be used in the request parameter.<p><p><b>Note: The service will not cast exception if you pass on a non-existing player id or player id belongs to another network.</b>",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 11838,
        "name": "uuid",
        "description": "UUID representation of one or more player health ID.",
        "datatype": "STRING"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "list-ignored-problems": {
    "path": "/api/rest/playerhealth/ignoreproblems",
    "description": "Returns the list of the problem numbers ignored by CM. <p> </p>",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": [
      {
        "id": 11922,
        "name": "limit",
        "description": "Limit search result",
        "defaultValue": "10",
        "datatype": "INTEGER"
      },
      {
        "id": 11923,
        "name": "offset",
        "description": "Offset is the first index to perform the search. Use this for paging.",
        "defaultValue": "0",
        "datatype": "INTEGER"
      },
      {
        "id": 11924,
        "name": "sort",
        "description": "Comma separated list of fields to sort by. Use - sign (minus sign) to identify the column should be sort by descending.You can use + sign to indicate ascending sort, but remember you need to URL encode the + sign. To avoid URL encoding issue, just leave out the + sign.",
        "defaultValue": "id",
        "datatype": "STRING"
      },
      {
        "id": 11925,
        "name": "filters",
        "description": "One or more filter can be apply with following comparator:<b>eq</b>, <b>ne</b>, <b>ge</b>, <b>le</b>, <b>gt</b>, <b>lt</b>, <b>in</b> and <b>like</b>.<p><p>",
        "sample": "{'name' : {'values':['test%', '%xmas%'], comparator : 'like'}}",
        "datatype": "STRING"
      },
      {
        "id": 11926,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "list-network-activities": {
    "path": "/api/rest/playerhealth/activity",
    "description": "List all network activities.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": null
  },
  "list-player-health": {
    "path": "/api/rest/playerhealth/",
    "description": "Returns one or more player's health information.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": [
      {
        "id": 11766,
        "name": "limit",
        "description": "Limit search result",
        "defaultValue": "10",
        "datatype": "INTEGER"
      },
      {
        "id": 11767,
        "name": "offset",
        "description": "Offset is the first index to perform the search. Use this for paging.",
        "defaultValue": "0",
        "datatype": "INTEGER"
      },
      {
        "id": 11768,
        "name": "sort",
        "description": "Comma separated list of fields to sort by. Use - sign (minus sign) to identify the column should be sort by descending.You can use + sign to indicate ascending sort, but remember you need to URL encode the + sign. To avoid URL encoding issue, just leave out the + sign.",
        "defaultValue": "problemNumber",
        "datatype": "STRING"
      },
      {
        "id": 11769,
        "name": "filters",
        "description": "One or more filter can be apply with following comparator:<b>eq</b>, <b>ne</b>, <b>ge</b>, <b>le</b>, <b>gt</b>, <b>lt</b>, <b>in</b> and <b>like</b>.<p><p>",
        "sample": "{'name' : {'values':['test%', '%xmas%'], comparator : 'like'}}",
        "datatype": "STRING"
      },
      {
        "id": 11770,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      },
      {
        "id": 11771,
        "name": "search",
        "description": "A string that the user wants to search for.The system will search for problems containing that string.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "list-problems": {
    "path": "/api/rest/playerhealth/problems",
    "description": "List all problems. <p>Note: The query parameter does not work here since this object is not retrieved for database. It'san enum which has all the problems reported by player. It is a static data we can not search OR Filter OR use any of the query parameters. The is implemented as Result Page just for the use of frontend.</p>",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": [
      {
        "id": 11783,
        "name": "limit",
        "description": "Limit search result",
        "defaultValue": "10",
        "datatype": "INTEGER"
      },
      {
        "id": 11784,
        "name": "offset",
        "description": "Offset is the first index to perform the search. Use this for paging.",
        "defaultValue": "0",
        "datatype": "INTEGER"
      },
      {
        "id": 11785,
        "name": "sort",
        "description": "Comma separated list of fields to sort by. Use - sign (minus sign) to identify the column should be sort by descending.You can use + sign to indicate ascending sort, but remember you need to URL encode the + sign. To avoid URL encoding issue, just leave out the + sign.",
        "defaultValue": "id",
        "datatype": "STRING"
      },
      {
        "id": 11786,
        "name": "filters",
        "description": "One or more filter can be apply with following comparator:<b>eq</b>, <b>ne</b>, <b>ge</b>, <b>le</b>, <b>gt</b>, <b>lt</b>, <b>in</b> and <b>like</b>.<p><p>",
        "sample": "{'name' : {'values':['test%', '%xmas%'], comparator : 'like'}}",
        "datatype": "STRING"
      },
      {
        "id": 11787,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      },
      {
        "id": 11788,
        "name": "search",
        "description": "A string that the user wants to search for.The system will search for problems containing that string.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "update-player-health-settings": {
    "path": "/api/rest/playerhealth/settings/{id}",
    "description": "Update player health settings.",
    "operation": "PUT",
    "pathParameters": [
      {
        "id": 11892,
        "name": "id",
        "description": "ID of the account to be fetched",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": {
      "clearNetworkErrorAfterNDays": "7",
      "deleteNetworkErrorAfterNDays": "30"
    }
  },
  "add-picklist-values-to-player-metadata": {
    "path": "/api/rest/playerMetadata/multiple/{metadataId}",
    "description": "Add Pick List values to Player Metadata.<p><p><span class='label label-info'>Note:</span>",
    "operation": "PUT",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": {
      "id": "2",
      "predefinedValues": [
        {
          "id": "1",
          "sortOrder": "1",
          "value": "samplepickvalue1"
        },
        {
          "id": "2",
          "sortOrder": "2",
          "value": "samplepickvalue2"
        }
      ]
    }
  },
  "create-player-metadata": {
    "path": "/api/rest/playerMetadata/",
    "description": "Create new player metadata.",
    "operation": "POST",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": {
      "datatype": "STRING",
      "name": "thenameofmetadata",
      "valueType": "ANY"
    }
  },
  "delete-player-metadata-by-id": {
    "path": "/api/rest/playerMetadata/{id}",
    "description": "Delete player metadata by id. If you want to delete more than one metadata.",
    "operation": "DELETE",
    "pathParameters": [
      {
        "id": 11954,
        "name": "id",
        "description": "ID of the metadata to be deleted",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "find-player-metadata-by-id": {
    "path": "/api/rest/playerMetadata/{id}",
    "description": "Returns information about the player metadata.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 11951,
        "name": "id",
        "description": "ID of the metadata to be fetched",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": [
      {
        "id": 11952,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "list-player-metadata": {
    "path": "/api/rest/playerMetadata/",
    "description": "Returns one or more player metadatas's information.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": [
      {
        "id": 12006,
        "name": "limit",
        "description": "Limit search result",
        "defaultValue": "10",
        "datatype": "INTEGER"
      },
      {
        "id": 12007,
        "name": "offset",
        "description": "Offset is the first index to perform the search. Use this for paging.",
        "defaultValue": "0",
        "datatype": "INTEGER"
      },
      {
        "id": 12008,
        "name": "sort",
        "description": "Comma separated list of fields to sort by. Use - sign (minus sign) to identify the column should be sort by descending.You can use + sign to indicate ascending sort, but remember you need to URL encode the + sign. To avoid URL encoding issue, just leave out the + sign.",
        "defaultValue": "name",
        "datatype": "STRING"
      },
      {
        "id": 12009,
        "name": "filters",
        "description": "One or more filter can be apply with following comparator:<b>eq</b>, <b>ne</b>, <b>ge</b>, <b>le</b>, <b>gt</b>, <b>lt</b>, <b>in</b> and <b>like</b>.<p><p>",
        "sample": "{'name' : {'values':['test%', '%xmas%'], comparator : 'like'}}",
        "datatype": "STRING"
      },
      {
        "id": 12010,
        "name": "search",
        "description": "A string that the user wants to search for.The system will search for metadata with [todo: description search fields] containing that string.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "update-player-metadata": {
    "path": "/api/rest/playerMetadata/{id}",
    "description": "Update Player Metadata.<p><p><span class='label label-info'>Note:</span>",
    "operation": "PUT",
    "pathParameters": [
      {
        "id": 12029,
        "name": "id",
        "description": "ID of the Player Metadata to be updated",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": {
      "name": "DemoforPlayerMetadata"
    }
  },
  "update-the-sort-order-of-the-player-metadata-variables-in-the-current-network": {
    "path": "/api/rest/playerMetadata/multi/{id}",
    "description": "Update the sort order of one or more player metadata in the current network.",
    "operation": "PUT",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": {
      "metadataVariables": [
        {
          "id": "1",
          "order": "12"
        },
        {
          "id": "2",
          "order": "13"
        }
      ]
    }
  },
  "add-media-to-normal-playlist": {
    "path": "/api/rest/playlists/{id}/playlistItems/{ids}",
    "description": "Add media to the end of the playlist. ",
    "operation": "PUT",
    "pathParameters": [
      {
        "id": 12360,
        "name": "id",
        "description": "Id of the normal playlist",
        "datatype": "INTEGER"
      },
      {
        "id": 12361,
        "name": "ids",
        "description": "Comma separated list of media's ids, which should append to playlist.",
        "datatype": "STRING"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "create-normal-playlist": {
    "path": "/api/rest/playlists/",
    "description": "Create new normal playlist.<p><p>Here are a few samples of request body for creating new normal playlist.<ul><li>Create a basic playlist:</li></ul><pre class='prettyprint'>{name: 'Basic Playlist',description: 'A demo for basic playlist'}</pre><ul><li>Create a message with categories and workgroups:</li></ul>It also assume you belong to workgroup with ID 2 or you don't belong to any workgroup.<pre class='prettyprint'>{name : 'A playlist with categories and workgroups',description : 'A demo playlist with workgroups and categories',categories : [{id : 3}, {id : 9}], workgroups : [{id : 1}, {id : 2, owner}]}</pre><ul><li>Create a message with playlist items:</li></ul><pre class='prettyprint'>{name : 'A playlist with 2 playlist items',description : 'A demo playlist with two playlist items',playlistItems : [{media : {id : 72}},{subplaylist : {id : 2}}] }</pre><ul><li>Create a message with playlist items and time schedules:</li></ul><pre class='prettyprint'>{name : 'Playlist item with time schedules',description : 'A demo playlist with a playlist items and time schedules',playlistItems : [{media : {id : 72},useValidRange : true,startValidDate : '2012-12-20',endValidDate : '2013-01-05',timeSchedules : [{days : ['SATURDAY', 'SUNDAY'], startTime : '00:00', endTime : '15:00'},{days : ['MONDAY'], startTime : '18:30', endTime : '19:05'}]}] }</pre><b>Note:</b> Duration is not available right after you created or updated a playlist. The process to calculate duration may take time, if you need information about duration, you have to recheck duration later.",
    "operation": "POST",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": {"name":"MynormalPlaylist","description":"DescriptionfornormalPlaylist","playlistType":"MEDIA_PLAYLIST","healthy":"true","enableSmartPlaylist":"false"}
  },
  "delete-playlist-by-id": {
    "path": "/api/rest/playlists/{id}",
    "description": "Delete playlist by id. If you want to delete more than one playlist, you can use delete playlist by filters service.",
    "operation": "DELETE",
    "pathParameters": [
      {
        "id": 12363,
        "name": "id",
        "description": "ID of the normal playlist to be deleted",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "duplicate-playlist": {
    "path": "/api/rest/playlists/{id}/duplicate",
    "description": "Duplicate a playlist.<p><p>",
    "operation": "POST",
    "pathParameters": [
      {
        "id": 14015,
        "name": "id",
        "description": "ID of the playlist to be duplicated.",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": {
      "description": "Demo.",
      "name": "Test"
    }
  },
  "find-normal-playlist-by-id": {
    "path": "/api/rest/playlists/{id}",
    "description": "Returns information about the normal playlist.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 12352,
        "name": "id",
        "description": "ID of the normal playlist to be fetched",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": [
      {
        "id": 12353,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "get-usage-for-playlist": {
    "path": "/api/rest/playlists/usage",
    "description": "Returns counts of timeslots, sub-playlists using playlist items specified in parameters.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": [
      {
        "id": 14019,
        "name": "ids",
        "description": "Comma separated list of playlist's ids for which usage should be calculated.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "list-all-available-playlist-items": {
    "path": "/api/rest/playlists/{id}/items",
    "description": "Returns information about playlist items.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 14380,
        "name": "id",
        "description": "ID of the playlist to fetch playlist items",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "list-available-thumbnails-for-playlist-items": {
    "path": "/api/rest/playlists/{id}/items/thumbnails",
    "description": "Returns available thumbnail for each playlist item for the given playlist.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 13541,
        "name": "id",
        "description": "ID of the playlist to be fetched",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "list-playlist-types": {
    "path": "/api/rest/playlists/types",
    "description": "Returns list of playlist types the server supports.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": null
  },
  "list-playlists": {
    "path": "/api/rest/playlists/all",
    "description": "Returns one or more playlist's information.<p><p>Filters:<p><ul><li> <i>Media with any workgroup</i>:</li><pre class='prettyprint linenums'>filters = {workgroups : {values : ['anyAssigned']}}</pre><li> <i>Media with <b>no</b> workgroup</i>:</li><pre class='prettyprint linenums'>filters = {workgroups : {values : ['notAssigned']}}</pre></ul>",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": [
      {
        "id": 13035,
        "name": "limit",
        "description": "Limit search result",
        "defaultValue": "10",
        "datatype": "INTEGER"
      },
      {
        "id": 13036,
        "name": "offset",
        "description": "Offset is the first index to perform the search. Use this for paging.",
        "defaultValue": "0",
        "datatype": "INTEGER"
      },
      {
        "id": 13037,
        "name": "sort",
        "description": "Comma separated list of fields to sort by. Use - sign (minus sign) to identify the column should be sort by descending.You can use + sign to indicate ascending sort, but remember you need to URL encode the + sign. To avoid URL encoding issue, just leave out the + sign.",
        "defaultValue": "name",
        "datatype": "STRING"
      },
      {
        "id": 13038,
        "name": "filters",
        "description": "One or more filter can be apply with following comparator:<b>eq</b>, <b>ne</b>, <b>ge</b>, <b>le</b>, <b>gt</b>, <b>lt</b>, <b>in</b>, <b>empty</b>, <b>notEmpty</b> and <b>like</b>.<p><p>",
        "sample": "{'name' : {'values':['test%', '%xmas%'], comparator : 'like'}}",
        "datatype": "STRING"
      },
      {
        "id": 13039,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      },
      {
        "id": 13040,
        "name": "search",
        "description": "A string that the user wants to search for.The system will search for playlist with [todo: description search fields] containing that string.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "list-playlists-for-landing-page": {
    "path": "/api/rest/playlists/",
    "description": "Returns one or more playlist's information. This service is a light version 'List Playlists' at following URL <pre>GET /api/rest/playlists/all</pre>",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": [
      {
        "id": 14113,
        "name": "limit",
        "description": "Limit search result",
        "defaultValue": "10",
        "datatype": "INTEGER"
      },
      {
        "id": 14114,
        "name": "offset",
        "description": "Offset is the first index to perform the search. Use this for paging.",
        "defaultValue": "0",
        "datatype": "INTEGER"
      },
      {
        "id": 14115,
        "name": "sort",
        "description": "Comma separated list of fields to sort by. Use - sign (minus sign) to identify the column should be sort by descending.You can use + sign to indicate ascending sort, but remember you need to URL encode the + sign. To avoid URL encoding issue, just leave out the + sign.",
        "defaultValue": "name",
        "datatype": "STRING"
      },
      {
        "id": 14116,
        "name": "filters",
        "description": "One or more filter can be apply with following comparator:<b>eq</b>, <b>ne</b>, <b>ge</b>, <b>le</b>, <b>gt</b>, <b>lt</b>, <b>in</b>, <b>empty</b>, <b>notEmpty</b>and <b>like</b>.<p><p>",
        "sample": "{'name' : {'values':['test%', '%xmas%'], comparator : 'like'}}",
        "datatype": "STRING"
      },
      {
        "id": 14117,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      },
      {
        "id": 14118,
        "name": "search",
        "description": "A string that the user wants to search for.The system will search for playlist with [todo: description search fields] containing that string.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "list-transitions": {
    "path": "/api/rest/playlists/transition",
    "description": "Returns list of transition.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": null
  },
  "list-transitions-by-groups": {
    "path": "/api/rest/playlists/listTransitions",
    "description": "Returns list of transitions by groups. If any, this list also include most used transitions for the network.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": null
  },
  "multi-update-playlists": {
    "path": "/api/rest/playlists/multi/{uuid}",
    "description": "Update one or more playlists.",
    "operation": "PUT",
    "pathParameters": [
      {
        "id": 14055,
        "name": "uuid",
        "datatype": "STRING"
      }
    ],
    "queryParameters": null,
    "queryBody": {
      "uuid": "e5a3564a-f20b-4fde-9ccc-583876ea54bc",
      "fields": {
        "description": "WeekendPlaylist."
      }
    }
  },
  "update-normal-playlist": {
    "path": "/api/rest/playlists/{id}",
    "description": "Update normal playlist.<b>Note:</b> Duration is now available right after you created or updated a playlist. The process to calculate duration may take time, if you need information about duration, you have to recheck duration later.",
    "operation": "PUT",
    "pathParameters": [
      {
        "id": 13245,
        "name": "id",
        "description": "ID of the normal playlist to be updated",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": {
      "description": "Demo.",
      "name": "Test"
    }
  },
  "find-playlist-with-given-name.": {
    "path": "/api/rest/playlists/findByName/{name}",
    "description": "find playlist whether it is exists or not with given name. ",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 13509,
        "name": "name",
        "description": "Name of the playlist to find.",
        "datatype": "STRING"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "create-a-publish-location": {
    "path": "/api/rest/publishlocations/",
    "description": "Here are a few samples of request body for creating new publish location.<ul><li>Create a basic FTP publish location:</li></ul><pre class='prettyprint'>{name: 'Basic FTP location',description: 'A demo for basic FTP location',type : 'FTP',host : 'localhost',username : 'john',password : 'password, don't make it too easy for hackers'}</pre><ul><li>Create a basic UNC publish location:</li></ul><b>Note:</b> <b>UNC</b> uses <i>path</i> attribute instead of <i>host</i> like <b>FTP</b>. Also note that we are using forward slash and not backslash in the path.<pre class='prettyprint'>{name: 'Basic UNC location',description: 'A demo for basic UNC location',type : 'UNC',path : '//nas/files',username : 'john',password : 'password, don't make it too easy for hackers'}</pre><ul><li>Create a more complex FTP publish location:</li></ul>Set port to 2121, use active mode and include sub-folders. Add two categories where <i>id</i> is 1 and 2, and two workgroup with <i>id</i> 3 and 4 where workgroup with id 3 is <i>owner</i>.<p><p><b>Note:</b> This sample assumes you have access to use workgroups. If you don't have access, the service will ignore workgroup settings and use your workgroup as owner-workgroup for all publish locations.<pre class='prettyprint'>{name: 'Advance FTP location',description: 'A demo for advance FTP location',type : 'FTP',host : 'localhost',path : 'files',port : 2121,username : 'john',password : 'password, don't make it too easy for hackers', activeFtp : true,subfolders : true,categories : [{id : 1},{id : 2}  ],workgroups : [{id : 3, owner : true},{id : 4}]}</pre>",
    "operation": "POST",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": {
      "activeFtp": "true",
      "autoApproval": "true",
      "checkInterval": "5",
      "enabled": "true",
      "host": "localhost",
      "name": "TestPublishlocation",
      "port": "21",
      "sendApprovalEmail": "false",
      "storeToRoot": "false",
      "subfolders": "true",
      "type": "FTP"
    }
  },
  "delete-publish-location-by-id": {
    "path": "/api/rest/publishlocations/{id}",
    "description": "Delete publish location by id. If you want to delete more than one publish location, you can use delete publish location by filters service.",
    "operation": "DELETE",
    "pathParameters": [
      {
        "id": 14427,
        "name": "id",
        "description": "ID of the publish location to be deleted",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "find-publish-location-by-id": {
    "path": "/api/rest/publishlocations/{id}",
    "description": "Returns information about the publish location.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 14424,
        "name": "id",
        "description": "ID of the publish location to be fetched",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": [
      {
        "id": 14425,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "get-publish-location-logs": {
    "path": "/api/rest/publishlocations/logs/{publishLocationId}/{id}",
    "description": "Get Publish location logs.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 14631,
        "name": "publishLocationId",
        "description": "ID of the Publish location for which the logs be fetched",
        "datatype": "INTEGER"
      },
      {
        "id": 14632,
        "name": "id",
        "description": "ID of the Publish location logs",
        "datatype": "AUTO"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "list-publish-locations": {
    "path": "/api/rest/publishlocations/",
    "description": "Returns one or more remote publish location's information.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": [
      {
        "id": 14548,
        "name": "limit",
        "description": "Limit search result",
        "defaultValue": "10",
        "datatype": "INTEGER"
      },
      {
        "id": 14549,
        "name": "offset",
        "description": "Offset is the first index to perform the search. Use this for paging.",
        "defaultValue": "0",
        "datatype": "INTEGER"
      },
      {
        "id": 14550,
        "name": "sort",
        "description": "Comma separated list of fields to sort by. Use - sign (minus sign) to identify the column should be sort by descending.You can use + sign to indicate ascending sort, but remember you need to URL encode the + sign. To avoid URL encoding issue, just leave out the + sign.",
        "defaultValue": "name",
        "datatype": "STRING"
      },
      {
        "id": 14551,
        "name": "filters",
        "description": "One or more filter can be apply with following comparator:<b>eq</b>, <b>ne</b>, <b>ge</b>, <b>le</b>, <b>gt</b>, <b>lt</b>, <b>in</b> and <b>like</b>.<p><p>",
        "sample": "{'name' : {'values':['%.png', 'test%', '%xmas%'], comparator : 'like'}}",
        "datatype": "STRING"
      },
      {
        "id": 14552,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      },
      {
        "id": 14553,
        "name": "search",
        "description": "A string that the user wants to search for.The system will search for publish locations with [todo: description search fields] containing that string.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "multi-update-publish-locations": {
    "path": "/api/rest/publishlocations/multi/{uuid}",
    "description": "Update one or more publish locations.",
    "operation": "PUT",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": {
      "uuid": "e5a3564a-f20b-4fde-9ccc-583876ea54bc",
      "fields": {
        "checkInterval": "6"
      }
    }
  },
  "test-connection-for-ftp-connection": {
    "path": "/api/rest/publishlocations/testconnection/ftp",
    "description": "Test connection for FTP connection",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": [
      {
        "id": 14635,
        "name": "id",
        "description": "Publish location's id",
        "datatype": "INTEGER"
      },
      {
        "id": 14636,
        "name": "host",
        "description": "Remote's hostname. Optional if publish location id is provided.",
        "datatype": "STRING"
      },
      {
        "id": 14637,
        "name": "path",
        "description": "Remote's path. Optional if publish location id is provided.",
        "datatype": "STRING"
      },
      {
        "id": 14638,
        "name": "port",
        "description": "Remote connection's port. Optional if publish location id is provided.",
        "datatype": "INTEGER"
      },
      {
        "id": 14639,
        "name": "username",
        "description": "Remote connection's username. Optional if publish location id is provided.",
        "datatype": "STRING"
      },
      {
        "id": 14640,
        "name": "password",
        "description": "Remote connection's password. Optional if publish location id is provided.",
        "datatype": "STRING"
      },
      {
        "id": 14641,
        "name": "activeFtp",
        "description": "Use Active Mode for FTP. Set this attribute to false for Pasive Mode. Optional if publish location id is provided.",
        "datatype": "STRING"
      },
      {
        "id": 14642,
        "name": "changePassword",
        "description": "set this attribute to true to change the password.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "test-connection-for-unc-connection": {
    "path": "/api/rest/publishlocations/testconnection/unc",
    "description": "Test connection for UNC connection",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": [
      {
        "id": 14645,
        "name": "id",
        "description": "Publish location's id. Optional if publish location id is provided.",
        "datatype": "INTEGER"
      },
      {
        "id": 14646,
        "name": "path",
        "description": "Remote's path. Optional if publish location id is provided.",
        "datatype": "STRING"
      },
      {
        "id": 14647,
        "name": "username",
        "description": "Remote connection's username. Optional if publish location id is provided.",
        "datatype": "STRING"
      },
      {
        "id": 14648,
        "name": "password",
        "description": "Remote connection's password. Optional if publish location id is provided.",
        "datatype": "STRING"
      },
      {
        "id": 14649,
        "name": "changePassword",
        "description": "set this attribute to true to change the password.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "update-a-publish-location": {
    "path": "/api/rest/publishlocations/{id}",
    "description": "Here are a few samples of request body for updating new publish location.<ul><li>Update a basic FTP publish location:</li></ul><pre class='prettyprint'>{name: 'Basic FTP location',description: 'A demo for basic FTP location',type : 'FTP',host : 'localhost',username : 'john',password : 'password, don't make it too easy for hackers'}</pre><ul><li>Update a basic UNC publish location:</li></ul><b>Note:</b> <b>UNC</b> uses <i>path</i> attribute instead of <i>host</i> like <b>FTP</b>. Also note that we are using forward slash and not backslash in the path.<pre class='prettyprint'>{name: 'Basic UNC location',description: 'A demo for basic UNC location',type : 'UNC',path : '//nas/files',username : 'john',password : 'password, don't make it too easy for hackers'}</pre><ul><li>Update a more complex FTP publish location:</li></ul>Set port to 2121, use active mode and include sub-folders. Add two categories where <i>id</i> is 1 and 2, and two workgroup with <i>id</i> 3 and 4 where workgroup with id 3 is <i>owner</i>.<p><p><b>Note:</b> This sample assumes you have access to use workgroups. If you don't have access, the service will ignore workgroup settings and use your workgroup as owner-workgroup for all publish locations.<pre class='prettyprint'>{name: 'Advance FTP location',description: 'A demo for advance FTP location',type : 'FTP',host : 'localhost',path : 'files',port : 2121,username : 'john',password : 'password, don't make it too easy for hackers', activeFtp : true,subfolders : true,categories : [{id : 1},{id : 2}  ],workgroups : [{id : 3, owner : true},{id : 4}]}</pre>",
    "operation": "PUT",
    "pathParameters": [
      {
        "id": 14589,
        "name": "id",
        "description": "ID of the publish location to be updated",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": {
      "activeFtp": "true",
      "autoApproval": "true",
      "checkInterval": "5",
      "enabled": "true",
      "host": "localhost",
      "name": "TestPublishlocation",
      "port": "21",
      "sendApprovalEmail": "false",
      "storeToRoot": "false",
      "subfolders": "true",
      "type": "FTP"
    }
  },
  "create-report": {
    "path": "/api/rest/reports/",
    "description": "Create new report.",
    "operation": "POST",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": {
      "name": "thenameofthereport",
      "description": "thenameofthedescription",
      "periodStart": "thestartperiod",
      "periodEnd": "theendperiod"
    }
  },
  "delete-report-by-id": {
    "path": "/api/rest/reports/{id}",
    "description": "Delete report by id.",
    "operation": "DELETE",
    "pathParameters": [
      {
        "id": 14710,
        "name": "id",
        "description": "ID of the report to be deleted",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "find-report-by-id": {
    "path": "/api/rest/reports/{id}",
    "description": "Returns information about the report.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 14707,
        "name": "id",
        "description": "ID of the report to be fetched",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": [
      {
        "id": 14708,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "generate-report": {
    "path": "/api/rest/reports/{id}/status",
    "description": "Generates report for the given report id.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 14873,
        "name": "id",
        "description": "Id of the report",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "get-logo-for-report-settings": {
    "path": "/api/rest/reports/settings/getLogo",
    "description": "This service gets logo file details stored in default folder in server location.If there is no logo for the input query paramters, then service returns empty object",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": [
      {
        "id": 14887,
        "name": "fileName",
        "description": "Name of the image file. It is mandatory if the default logo is false",
        "datatype": "STRING"
      },
      {
        "id": 14888,
        "name": "defaultLogo",
        "description": "Value should be 'true', if user wants to get the default logo details",
        "defaultValue": "false",
        "datatype": "BOOLEAN"
      }
    ],
    "queryBody": null
  },
  "get-report-settings": {
    "path": "/api/rest/reports/settings",
    "description": "Returns information about the report settings for the logged in network",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": [
      {
        "id": 14867,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "list-reports": {
    "path": "/api/rest/reports/",
    "description": "Returns one or more report's information.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": [
      {
        "id": 14848,
        "name": "limit",
        "description": "Limit search result",
        "defaultValue": "10",
        "datatype": "INTEGER"
      },
      {
        "id": 14849,
        "name": "offset",
        "description": "Offset is the first index to perform the search. Use this for paging.",
        "defaultValue": "0",
        "datatype": "INTEGER"
      },
      {
        "id": 14850,
        "name": "sort",
        "description": "Comma separated list of fields to sort by. Use - sign (minus sign) to identify the column should be sort by descending.You can use + sign to indicate ascending sort, but remember you need to URL encode the + sign. To avoid URL encoding issue, just leave out the + sign.",
        "defaultValue": "name",
        "datatype": "STRING"
      },
      {
        "id": 14851,
        "name": "filters",
        "description": "One or more filter can be apply with following comparator:<b>eq</b>, <b>ne</b>, <b>ge</b>, <b>le</b>, <b>gt</b>, <b>lt</b>, <b>in</b> and <b>like</b>.<p><p>",
        "sample": "{'name' : {'values':['test%', '%xmas%'], comparator : 'like'}}",
        "datatype": "STRING"
      },
      {
        "id": 14852,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      },
      {
        "id": 14853,
        "name": "search",
        "description": "A string that the user wants to search for.The system will search for reports with [todo: description search fields] containing that string.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "process-report-settings": {
    "path": "/api/rest/reports/settings",
    "description": "This service saves or updates report settings for the logged in network",
    "operation": "POST",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": {"header":"headervalue","footer":"footervalue","reportLanguage":"enforenglishlanguage","dataLocale":"enforenglishlanguage","align":"LEFT,RIGHT or CENTER",
    "logoImageName":"imagename"}
  },
  "create-role": {
    "path": "/api/rest/roles/",
    "description": "Create new role.",
    "operation": "POST",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": {"name":"maintest","system":"false","resources":{"name":"testresource","description":"testdescription","sortOrder":"30"}}
  },
  "delete-role-by-id": {
    "path": "/api/rest/roles/{id}",
    "description": "Delete role by id.",
    "operation": "DELETE",
    "pathParameters": [
      {
        "id": 14934,
        "name": "id",
        "description": "ID of the role to be deleted.",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "find-resource-by-id": {
    "path": "/api/rest/roles/{id}/resource",
    "description": "Returns information about the resource. The response object will not contain 'implicit' attribute.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 14931,
        "name": "id",
        "description": "ID of the resource to be fetched",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": [
      {
        "id": 14932,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "find-role-by-id": {
    "path": "/api/rest/roles/{id}",
    "description": "Returns information about the role.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 14920,
        "name": "id",
        "description": "ID of the role to be fetched",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": [
      {
        "id": 14921,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "get-usage-for-role": {
    "path": "/api/rest/roles/usage",
    "description": "Returns counts of users using role items specified in parameters.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": [
      {
        "id": 15006,
        "name": "ids",
        "description": "Comma separated list of role's ids for which usage should be calculated.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "list-resources": {
    "path": "/api/rest/roles/resources",
    "description": "Returns list of resources.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": null
  },
  "list-roles": {
    "path": "/api/rest/roles/",
    "description": "Returns one or more role's information.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": [
      {
        "id": 14972,
        "name": "limit",
        "description": "Limit search result",
        "defaultValue": "10",
        "datatype": "INTEGER"
      },
      {
        "id": 14973,
        "name": "offset",
        "description": "Offset is the first index to perform the search. Use this for paging.",
        "defaultValue": "0",
        "datatype": "INTEGER"
      },
      {
        "id": 14974,
        "name": "sort",
        "description": "Comma separated list of fields to sort by. Use - sign (minus sign) to identify the column should be sort by descending.You can use + sign to indicate ascending sort, but remember you need to URL encode the + sign. To avoid URL encoding issue, just leave out the + sign.",
        "defaultValue": "name",
        "datatype": "STRING"
      },
      {
        "id": 14975,
        "name": "filters",
        "description": "One or more filter can be apply with following comparator:<b>eq</b>, <b>ne</b>, <b>ge</b>, <b>le</b>, <b>gt</b>, <b>lt</b>, <b>in</b> and <b>like</b>.<p><p>",
        "sample": "{'name' : {'values':['test%', '%xmas%'], comparator : 'like'}}",
        "datatype": "STRING"
      },
      {
        "id": 14976,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      },
      {
        "id": 14977,
        "name": "search",
        "description": "A string that the user wants to search for.The system will search for users with username or name containing that string.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "retrieve-list-of-roles-by-network": {
    "path": "/api/rest/roles/rolenetworks/{id}",
    "description": "Returns list of roles.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 15026,
        "name": "id",
        "description": "ID of the network to get list of roles.",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": [
      {
        "id": 15027,
        "name": "limit",
        "description": "Limit search result",
        "defaultValue": "10",
        "datatype": "INTEGER"
      },
      {
        "id": 15028,
        "name": "offset",
        "description": "Offset is the first index to perform the search. Use this for paging.",
        "defaultValue": "0",
        "datatype": "INTEGER"
      },
      {
        "id": 15029,
        "name": "sort",
        "description": "Comma separated list of fields to sort by. Use - sign (minus sign) to identify the column should be sort by descending.You can use + sign to indicate ascending sort, but remember you need to URL encode the + sign. To avoid URL encoding issue, just leave out the + sign.",
        "defaultValue": "name",
        "datatype": "STRING"
      },
      {
        "id": 15030,
        "name": "filters",
        "description": "One or more filter can be apply with following comparator:<b>eq</b>, <b>ne</b>, <b>ge</b>, <b>le</b>, <b>gt</b>, <b>lt</b>, <b>in</b> and <b>like</b>.<p><p>",
        "sample": "{'name' : {'values':['test%', '%xmas%'], comparator : 'like'}}",
        "datatype": "STRING"
      },
      {
        "id": 15031,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      },
      {
        "id": 15032,
        "name": "search",
        "description": "A string that the user wants to search for.The system will search for users with username or name containing that string.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "retrieve-list-of-roles-cumulative-current-user.": {
    "path": "/api/rest/roles/cumulative",
    "description": "Returns list of cumulative roles. This list contains roles where the user can assign to other users.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": null
  },
  "update-role": {
    "path": "/api/rest/roles/{id}",
    "description": "Update role.",
    "operation": "PUT",
    "pathParameters": [
      {
        "id": 14996,
        "name": "id",
        "description": "ID of the role to be updated.",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": {
      "system": "checkAdministratorornot",
      "name": "thenameoftherole"
    }
  },
  "delete-connecter-by-id": {
    "path": "/api/rest/serverstatus/{id}",
    "description": "Delete connector by id.",
    "operation": "DELETE",
    "pathParameters": [
      {
        "id": 15119,
        "name": "id",
        "description": "port of the connected to be deleted.",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "download-logs": {
    "path": "/api/rest/serverstatus/downloadLogs",
    "description": "Return's the task Id ,which can be passed as input to other service named 'Logs Location' which returns the downloaded location.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": null
  },
  "find-ldap-user": {
    "path": "/api/rest/serverstatus/findLdapUser",
    "description": "Find LDAP user.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": [
      {
        "id": 15147,
        "name": "url",
        "description": "LDAP host URL.",
        "datatype": "STRING"
      },
      {
        "id": 15148,
        "name": "bindDn",
        "description": "Connection DN.",
        "datatype": "STRING"
      },
      {
        "id": 15149,
        "name": "password",
        "description": "Connection password.",
        "datatype": "STRING"
      },
      {
        "id": 15150,
        "name": "userDn",
        "description": "Base DN.",
        "datatype": "STRING"
      },
      {
        "id": 15151,
        "name": "searchFilter",
        "description": "Username attribute.",
        "datatype": "STRING"
      },
      {
        "id": 15152,
        "name": "sampleUser",
        "description": "Sample user-name;Username to find on Ldap server.",
        "datatype": "STRING"
      },
      {
        "id": 15153,
        "name": "changePassword",
        "description": "set this attribute to true to change the password.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "get-logs-location-": {
    "path": "/api/rest/serverstatus/{taskId}/checkTask",
    "description": "Returns the location where the logs file have been downloaded .",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 15159,
        "name": "taskId",
        "datatype": "STRING"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "get-server-settings": {
    "path": "/api/rest/serverstatus/",
    "description": "Returns server setting information.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": null
  },
  "list-connectors": {
    "path": "/api/rest/serverstatus/listConnector",
    "description": "Returns the list of available connectors.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": null
  },
  "update-server-setting": {
    "path": "/api/rest/serverstatus/",
    "description": "Update server setting.",
    "operation": "PUT",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": {"tcatConnection":[{"port":"8080","existingPort":"8080","maxThreads":"20","maxKeepAliveRequests":"10","minSpareThreads":"10","enableLookups":"true"},{"port":"8080","existingPort":"8080","maxThreads":"20","maxKeepAliveRequests":"10","minSpareThreads":"10","enableLookups":"true"}],"ldapConfig":{"url":"ldap://xxxx.xxxx.com:00000","userDn":"DC=xxxxx","DC":"xxxxx","DC":"COM","bindDn":"test","searchFilter":"sAMAccountName","permissionsAttribute":"memberOf","rolePrefix":"ScalaRole_","workgroupPrefix":"ScalaWorkgroup_","useLdap":"false"},"clientConnection":{"hostname":"127.0.0.0","port":"8080","connectionPort":"8080","context":"/ContentManager","scheme":"HTTP"}}
  },
  "convert-smart-playlist": {
    "path": "/api/rest/smartplaylists/convert/{id}",
    "description": "Convert smart playlist to normal playlist.<p><p>",
    "operation": "PUT",
    "pathParameters": [
      {
        "id": 15795,
        "name": "id",
        "description": "ID of the smart playlist to be converted.",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": {
      "description": "Demo.",
      "name": "Test"
    }
  },
  "create-smart-playlist": {
    "path": "/api/rest/smartplaylists/",
    "description": "Create new Smart playlist.<p><p>Here are a few samples of request body for creating new normal playlist.<ul><li>Create a basic smart playlist:</li></ul><pre class='prettyprint'>{name: 'Basic Playlist',description: 'A demo for basic playlist'}</pre><ul><li>Create a smart playlist with categories and workgroups:</li></ul>It also assume you belong to workgroup with ID 2 or you don't belong to any workgroup.<pre class='prettyprint'>{name : 'A playlist with categories and workgroups',description : 'A demo playlist with workgroups and categories',categories : [{id : 3}, {id : 9}], workgroups : [{id : 1}, {id : 2, owner}]}</pre><b>Note:</b> Duration is not available right after you created or updated a playlist. The process to calculate duration may take time, if you need information about duration, you have to recheck duration later.",
    "operation": "POST",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": {"name":"MysmartPlaylist","description":"DescriptionforsmartPlaylist","playlistType":"MEDIA_PLAYLIST","healthy":"true","enableSmartPlaylist":"true"}
  },
  "find-smart-playlist-by-id": {
    "path": "/api/rest/smartplaylists/{id}",
    "description": "Returns information about the smart playlist.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 15225,
        "name": "id",
        "description": "ID of the smart playlist to be fetched",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": [
      {
        "id": 15226,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "preview-conditions": {
    "path": "/api/rest/smartplaylists/previewConditions",
    "description": "Preview Playlist items based on conditions.",
    "operation": "POST",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": {
      "limit": "10",
      "meetAllConditions": "false",
      "conditions": [
        {
          "comparator": "CONTAINS",
          "value": "png",
          "type": "TITLE"
        }
      ],
      "sortOrderEnable": "true",
      "sortBy": "NAME",
      "sortOrderAsc": "false"
    }
  },
  "re-generate-smart-playlist": {
    "path": "/api/rest/smartplaylists/{uuid}/regenerateSmartPlaylist",
    "description": "Generate new smart playlist from existing setup.<b>Note:</b> Duration is not available right after you created or updated a playlist. The process to calculate duration may take time, if you need information about duration, you have to recheck duration later.",
    "operation": "POST",
    "pathParameters": [
      {
        "id": 15733,
        "name": "uuid",
        "description": "Uuid of the smart playlists to be re-generated.",
        "datatype": "STRING"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "update-smart-playlist": {
    "path": "/api/rest/smartplaylists/{id}",
    "description": "Update Smart Playlist.<p><p><span class='label label-info'>Note:</span><b>Note:</b> Duration is not available right after you created or updated a playlist. The process to calculate duration may take time, if you need information about duration, you have to recheck duration later.",
    "operation": "PUT",
    "pathParameters": [
      {
        "id": 15403,
        "name": "id",
        "description": "ID of the normal playlist to be updated",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": {
      "name": "Test",
      "description": "Demo.",
      "smartPlaylistItemLimit": "10",
      "meetAllConditions": "false",
      "conditions": [
        {
          "id": "1",
          "value": "1",
          "type": "TITLE",
          "comparator": "EQUALS"
        }
      ]
    }
  },
  "get-url-bandwidth-information": {
    "path": "/api/rest/statistics/bandwidth",
    "description": "Returns information about bandwidth used for requested URL.<p><p>These statistics are reset when Content Manager restarts and need to be enabled in <i>features.xml</i>. The numbers from this service belongs to the network you are logged on.<p><p>This statistics do not take old data from WebDav. Only data using Restful and Resources from Enterprise releases are included on the statistics.<p><p>Scala reserves the right to change interface for this service without notice.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": [
      {
        "id": 15807,
        "name": "filters",
        "description": "One or more filter can be apply with following comparator:<b>eq</b>, <b>ne</b>, <b>ge</b> and <b>le</b.<p><p><b>Note:</b> We don't support multiple search values for URL. This mean you can only perform filter on <b>one</b> URL.",
        "sample": "#1{'hits' : {'values':[10], comparator : 'ge'}}#2{'url' : {'values':['GET'], comparator : 'like'}}",
        "datatype": "STRING"
      },
      {
        "id": 15808,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "get-stored-value-associated-with-uuid": {
    "path": "/api/rest/storage/{uuid}",
    "description": "Returns the stored value.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 15812,
        "name": "uuid",
        "description": "UUID",
        "datatype": "STRING"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "store-value": {
    "path": "/api/rest/storage/",
    "description": "Store value.<p><p>Any string can be store. Including JSON string. Maximum characters is 10240.",
    "operation": "POST",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": "Anystringcanbestore.IncludingJSONstring."
  },
  "delete-template-by-id-(deprecated)": {
    "path": "/api/rest/templates/{id}",
    "description": "This service is deprecated, use delete service in Media API.",
    "operation": "DELETE",
    "pathParameters": [
      {
        "id": 15842,
        "name": "id",
        "description": "ID of the template to be deleted",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "find-template-by-id": {
    "path": "/api/rest/templates/{id}",
    "description": "Returns information about the template.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 15839,
        "name": "id",
        "description": "ID of the template to be fetched",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": [
      {
        "id": 15840,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "list-templates": {
    "path": "/api/rest/templates/",
    "description": "Returns one or more template's information.<p><p>Filters:<p><ul><li> <i>Media with any workgroup</i>:</li><pre class='prettyprint linenums'>filters = {workgroups : {values : ['anyAssigned']}}</pre><li> <i>Media with <b>no</b> workgroup</i>:</li><pre class='prettyprint linenums'>filters = {workgroups : {values : ['notAssigned']}}</pre></ul>",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": [
      {
        "id": 15877,
        "name": "limit",
        "description": "Limit search result",
        "defaultValue": "10",
        "datatype": "INTEGER"
      },
      {
        "id": 15878,
        "name": "offset",
        "description": "Offset is the first index to perform the search. Use this for paging.",
        "defaultValue": "0",
        "datatype": "INTEGER"
      },
      {
        "id": 15879,
        "name": "sort",
        "description": "Comma separated list of fields to sort by. Use - sign (minus sign) to identify the column should be sort by descending.You can use + sign to indicate ascending sort, but remember you need to URL encode the + sign. To avoid URL encoding issue, just leave out the + sign.",
        "defaultValue": "name",
        "datatype": "STRING"
      },
      {
        "id": 15880,
        "name": "filters",
        "description": "One or more filter can be apply with following comparator:<b>eq</b>, <b>ne</b>, <b>ge</b>, <b>le</b>, <b>gt</b>, <b>lt</b>, <b>in</b> and <b>like</b>.<p><p>",
        "sample": "{'name' : {'values':['test%', '%xmas%'], comparator : 'like'}}",
        "datatype": "STRING"
      },
      {
        "id": 15881,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      },
      {
        "id": 15882,
        "name": "search",
        "description": "A string that the user wants to search for.The system will search for templates with [todo: description search fields] containing that string.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "list-templates-in-use": {
    "path": "/api/rest/templates/inuse",
    "description": "Returns one or more template's information for templates that have messages created from them.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": [
      {
        "id": 16038,
        "name": "limit",
        "description": "Limit search result",
        "defaultValue": "10",
        "datatype": "INTEGER"
      },
      {
        "id": 16039,
        "name": "offset",
        "description": "Offset is the first index to perform the search. Use this for paging.",
        "defaultValue": "0",
        "datatype": "INTEGER"
      },
      {
        "id": 16040,
        "name": "sort",
        "description": "Comma separated list of fields to sort by. Use - sign (minus sign) to identify the column should be sort by descending.You can use + sign to indicate ascending sort, but remember you need to URL encode the + sign. To avoid URL encoding issue, just leave out the + sign.",
        "defaultValue": "name",
        "datatype": "STRING"
      },
      {
        "id": 16041,
        "name": "filters",
        "description": "One or more filter can be apply with following comparator:<b>eq</b>, <b>ne</b>, <b>ge</b>, <b>le</b>, <b>gt</b>, <b>lt</b>, <b>in</b> and <b>like</b>.<p><p>",
        "sample": "{'name' : {'values':['test%', '%xmas%'], comparator : 'like'}}",
        "datatype": "STRING"
      },
      {
        "id": 16042,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      },
      {
        "id": 16043,
        "name": "search",
        "description": "A string that the user wants to search for.The system will search for templates with [todo: description search fields] containing that string.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "multi-update-templates": {
    "path": "/api/rest/templates/multi/{uuid}",
    "description": "Update one or more templates.",
    "operation": "PUT",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": {
      "uuid": "e5a3564a-f20b-4fde-9ccc-583876ea54bc",
      "fields": {
        "description": "TemplateText."
      }
    }
  },
  "update-single-template": {
    "path": "/api/rest/templates/{id}",
    "description": "Update template.<p><p>This an example of how to update name and description of a template.<p><p><pre class='prettyprint linenums'>   {name : 'New template name',description : 'New description goes here.'}</pre>",
    "operation": "PUT",
    "pathParameters": [
      {
        "id": 15942,
        "name": "id",
        "description": "ID of the template to be updated",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": {
      "description": "Demotemplate.",
      "name": "Basictemplate"
    }
  },
  "get-the-settings-for-the-currently-authenticated-user.": {
    "path": "/api/rest/users/current/",
    "description": "Get the settings for the currently authenticated user.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": null
  },
  "update-the-user-settings-for-the-currently-authenticated-user.": {
    "path": "/api/rest/users/current/{id}",
    "description": "Update the user settings for the currently authenticated user.",
    "operation": "PUT",
    "pathParameters": [
      {
        "id": 16081,
        "name": "id",
        "description": "ID of the current user to be updated",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": {
      "dateFormat": "MM-dd-yyyy",
      "emailAddress": "bang@scala.com",
      "enabled": "false",
      "firstname": "userfirstname",
      "language": "English",
      "languageCode": "en",
      "lastname": "userlastname",
      "name": "userfirstnameandlastname",
      "isAutoMediaApprover": "false",
      "receiveEmailAlerts": "false",
      "timeFormat": "12h",
      "username": "testuser"
    }
  },
  "add-user-to-network": {
    "path": "/api/rest/users/{networkId}/networks/{ids}/roles/{rIds}",
    "description": "Add user to the network. ",
    "operation": "PUT",
    "pathParameters": [
      {
        "id": 16143,
        "name": "networkId",
        "description": "Id of the network",
        "datatype": "INTEGER"
      },
      {
        "id": 16144,
        "name": "ids",
        "description": "Comma separated list of user's ids, which should append to network.",
        "datatype": "STRING"
      },
      {
        "id": 16145,
        "name": "rIds",
        "description": "Comma separated list of role's ids, which should append to network.",
        "datatype": "STRING"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "create-a-user": {
    "path": "/api/rest/users/",
    "description": "Create a new User",
    "operation": "POST",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": {
      "dateFormat": "MM-dd-yyyy",
      "emailaddress": "bang@scala.com",
      "enabled": "false",
      "firstname": "userfirstname",
      "isAsiaSpeakingLanguage": "true",
      "isSuperAdministrator": "false",
      "isWebserviceUser": "true",
      "language": "English",
      "languageCode": "en",
      "lastname": "userlastname",
      "password": "testpassword",
      "name": "userfirstnameandlastname",
      "receiveApprovalEmails": "false",
      "receiveEmailAlerts": "false",
      "timeFormat": "12h",
      "username": "testuser",
      "workgroup": {
        "description": "workgrouptest1",
        "id": "10",
        "name": "workgroupdescription"
      }
    }
  },
  "create-a-user-for-specific-network": {
    "path": "/api/rest/users/usernetworks/{networkId}",
    "description": "Create a new user for specific network",
    "operation": "POST",
    "pathParameters": [
      {
        "id": 16549,
        "name": "networkId",
        "description": "The Id of the network linked with the user.",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": {
      "dateFormat": "MM-dd-yyyy",
      "emailaddress": "bang@scala.com",
      "enabled": "false",
      "firstname": "userfirstname",
      "isAsiaSpeakingLanguage": "true",
      "isSuperAdministrator": "false",
      "isWebserviceUser": "true",
      "language": "English",
      "languageCode": "en",
      "lastname": "userlastname",
      "password": "testpassword",
      "name": "userfirstnameandlastname",
      "receiveApprovalEmails": "false",
      "receiveEmailAlerts": "false",
      "timeFormat": "12h",
      "username": "testuser",
      "workgroup": {
        "description": "workgrouptest1",
        "id": "10",
        "name": "workgroupdescription"
      }
    }
  },
  "delete-a-user-by-id": {
    "path": "/api/rest/users/{id}",
    "description": "Delete user by id.",
    "operation": "DELETE",
    "pathParameters": [
      {
        "id": 16147,
        "name": "id",
        "description": "ID of the media to be deleted",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "delete-user-by-network": {
    "path": "/api/rest/users/{networkId}/networks/{id}",
    "description": "Delete user by network.",
    "operation": "DELETE",
    "pathParameters": [
      {
        "id": 16551,
        "name": "networkId",
        "description": "The Id of the network linked with the user.",
        "datatype": "INTEGER"
      },
      {
        "id": 16552,
        "name": "id",
        "description": "ID of the user to be deleted",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "find-user-by-id": {
    "path": "/api/rest/users/{id}",
    "description": "Returns information about the user.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 16134,
        "name": "id",
        "description": "ID of the user to be fetched",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": [
      {
        "id": 16135,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "find-user-property-by-name": {
    "path": "/api/rest/users/userProperties/{name}",
    "description": "Returns information about the user-property.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 16457,
        "name": "name",
        "description": "Name of the user-property used to fetch the details",
        "datatype": "STRING"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "list-all-networks-users": {
    "path": "/api/rest/users/existingUsers/{networkId}",
    "description": "Returns list all networks users.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 16611,
        "name": "networkId",
        "description": "The Id of the network linked with the user.",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": [
      {
        "id": 16612,
        "name": "limit",
        "description": "Limit search result",
        "defaultValue": "10",
        "datatype": "INTEGER"
      },
      {
        "id": 16613,
        "name": "offset",
        "description": "Offset is the first index to perform the search. Use this for paging.",
        "defaultValue": "0",
        "datatype": "INTEGER"
      },
      {
        "id": 16614,
        "name": "sort",
        "description": "Comma separated list of fields to sort by. Use - sign (minus sign) to identify the column should be sort by descending.You can use + sign to indicate ascending sort, but remember you need to URL encode the + sign. To avoid URL encoding issue, just leave out the + sign.",
        "defaultValue": "username",
        "datatype": "STRING"
      },
      {
        "id": 16615,
        "name": "filters",
        "description": "One or more filter can be apply with following comparator:<b>eq</b>, <b>ne</b>, <b>ge</b>, <b>le</b>, <b>gt</b>, <b>lt</b>, <b>in</b> and <b>like</b>.<p><p>",
        "sample": "{'username' : {'values':['test%', '%xmas%'], comparator : 'like'}}",
        "datatype": "STRING"
      },
      {
        "id": 16616,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      },
      {
        "id": 16617,
        "name": "search",
        "description": "A string that the user wants to search for.The system will search for users with username or name containing that string.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "list-users": {
    "path": "/api/rest/users/",
    "description": "Returns one or more user's information.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": [
      {
        "id": 16290,
        "name": "limit",
        "description": "Limit search result",
        "defaultValue": "10",
        "datatype": "INTEGER"
      },
      {
        "id": 16291,
        "name": "offset",
        "description": "Offset is the first index to perform the search. Use this for paging.",
        "defaultValue": "0",
        "datatype": "INTEGER"
      },
      {
        "id": 16292,
        "name": "sort",
        "description": "Comma separated list of fields to sort by. Use - sign (minus sign) to identify the column should be sort by descending.You can use + sign to indicate ascending sort, but remember you need to URL encode the + sign. To avoid URL encoding issue, just leave out the + sign.",
        "defaultValue": "username",
        "datatype": "STRING"
      },
      {
        "id": 16293,
        "name": "filters",
        "description": "One or more filter can be apply with following comparator:<b>eq</b>, <b>ne</b>, <b>ge</b>, <b>le</b>, <b>gt</b>, <b>lt</b>, <b>in</b> and <b>like</b>.<p><p>",
        "sample": "{'username' : {'values':['test%', '%xmas%'], comparator : 'like'}}",
        "datatype": "STRING"
      },
      {
        "id": 16294,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      },
      {
        "id": 16295,
        "name": "search",
        "description": "A string that the user wants to search for.The system will search for users with username or name containing that string.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "multi-update-users": {
    "path": "/api/rest/users/multi/{uuid}",
    "description": "Update one or more users.",
    "operation": "PUT",
    "pathParameters": [
      {
        "id": 16651,
        "name": "uuid",
        "datatype": "STRING"
      }
    ],
    "queryParameters": null,
    "queryBody": {
      "uuid": "e5a3564a-f20b-4fde-9ccc-583876ea54bc",
      "fields": {
        "language": "SampleEnglish."
      }
    }
  },
  "process-user-multiple-properties-": {
    "path": "/api/rest/users/userMultiProperties",
    "description": "Create or update the user multiple property based on name.",
    "operation": "POST",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": {"userProperties":[{"name":"test","value":"test"}]}
  },
  "process-user-property": {
    "path": "/api/rest/users/userProperties",
    "description": "Create or update the user-property based on name.",
    "operation": "POST",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": {
      "name": "thumbnail.size",
      "value": "large"
    }
  },
  "reset-build-in-administrator-password": {
    "path": "/api/rest/users/resetPassword",
    "description": "Reset build-in administrator password.<p><p>This service can only be called by build-in administrator from localhost. Read documentation on how to reset build-in administrator password.<p><p>Once the password is reset, the administrator must re-login.",
    "operation": "PUT",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": {
      "password": "testpassword"
    }
  },
  "retrieve-list-of-users-by-network": {
    "path": "/api/rest/users/networks/{id}",
    "description": "Returns list of users.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 16446,
        "name": "id",
        "description": "ID of the network to get list of users.",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": [
      {
        "id": 16447,
        "name": "limit",
        "description": "Limit search result",
        "defaultValue": "10",
        "datatype": "INTEGER"
      },
      {
        "id": 16448,
        "name": "offset",
        "description": "Offset is the first index to perform the search. Use this for paging.",
        "defaultValue": "0",
        "datatype": "INTEGER"
      },
      {
        "id": 16449,
        "name": "sort",
        "description": "Comma separated list of fields to sort by. Use - sign (minus sign) to identify the column should be sort by descending.You can use + sign to indicate ascending sort, but remember you need to URL encode the + sign. To avoid URL encoding issue, just leave out the + sign.",
        "defaultValue": "username",
        "datatype": "STRING"
      },
      {
        "id": 16450,
        "name": "filters",
        "description": "One or more filter can be apply with following comparator:<b>eq</b>, <b>ne</b>, <b>ge</b>, <b>le</b>, <b>gt</b>, <b>lt</b>, <b>in</b> and <b>like</b>.<p><p>",
        "sample": "{'username' : {'values':['test%', '%xmas%'], comparator : 'like'}}",
        "datatype": "STRING"
      },
      {
        "id": 16451,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      },
      {
        "id": 16452,
        "name": "search",
        "description": "A string that the user wants to search for.The system will search for users with username or name containing that string.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "update-a-user": {
    "path": "/api/rest/users/{id}",
    "description": "Update user.",
    "operation": "PUT",
    "pathParameters": [
      {
        "id": 16380,
        "name": "id",
        "description": "ID of the user to be updated",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": {
      "dateFormat": "MM-dd-yyyy",
      "emailaddress": "bang@scala.com",
      "enabled": "false",
      "firstname": "userfirstname",
      "isAsiaSpeakingLanguage": "true",
      "isSuperAdministrator": "false",
      "isWebserviceUser": "false",
      "language": "English",
      "languageCode": "en",
      "lastname": "userlastname",
      "name": "userfirstnameandlastname",
      "receiveApprovalEmails": "false",
      "receiveEmailAlerts": "false",
      "timeFormat": "12h",
      "username": "testuser",
      "workgroup": {
        "description": "workgroup",
        "id": "11",
        "name": "workgroupdescription"
      },
      "roles": {
        "id": "10",
        "name": "administrator"
      }
    }
  },
  "update-users-ui-settings": {
    "path": "/api/rest/users/uiSettings",
    "description": null,
    "operation": "PUT",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": null
  },
  "find-user-activity-by-id": {
    "path": "/api/rest/useractivity/{id}",
    "description": "Returns information about the user action.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 16676,
        "name": "id",
        "description": "ID of the user activity to be fetched",
        "datatype": "AUTO"
      }
    ],
    "queryParameters": [
      {
        "id": 16677,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "list-user-activities": {
    "path": "/api/rest/useractivity/",
    "description": "Returns one or more user activity's information for the network.<p><p><b>Note:</b> UserDTO will only contain id, username, firstname and lastname.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": [
      {
        "id": 16702,
        "name": "limit",
        "description": "Limit search result",
        "defaultValue": "10",
        "datatype": "INTEGER"
      },
      {
        "id": 16703,
        "name": "offset",
        "description": "Offset is the first index to perform the search. Use this for paging.",
        "defaultValue": "0",
        "datatype": "INTEGER"
      },
      {
        "id": 16704,
        "name": "sort",
        "description": "Comma separated list of fields to sort by. Use - sign (minus sign) to identify the column should be sort by descending.You can use + sign to indicate ascending sort, but remember you need to URL encode the + sign. To avoid URL encoding issue, just leave out the + sign.",
        "defaultValue": "id",
        "datatype": "STRING"
      },
      {
        "id": 16705,
        "name": "filters",
        "description": "One or more filter can be apply with following comparator:<b>eq</b>, <b>ne</b>, <b>ge</b>, <b>le</b>, <b>gt</b>, <b>lt</b>, <b>in</b> and <b>like</b>.<p><p>",
        "sample": "{'id' : {'values':[123, 567], comparator : 'in'}}",
        "datatype": "STRING"
      },
      {
        "id": 16706,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      },
      {
        "id": 16707,
        "name": "search",
        "description": "A string that the user wants to search for.The system will search for user activities with [todo: description search fields] containing that string.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "list-user-activity-types": {
    "path": "/api/rest/useractivity/types",
    "description": "Returns all user activity types.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": null
  },
  "create-workgroup": {
    "path": "/api/rest/workgroups/",
    "description": "Create new workgroup.<p><p>Here are a few samples of request body for creating new workgroup.<ul><li>Create a basic workgroup:</li></ul><pre class='prettyprint'>{name: 'Basic workgroup',description: 'A demo for basic workgroup'}</pre><ul><li>Create a sub-workgroup. Assuming the parent workgroup <i>ID</i> is 1.</li></ul><pre class='prettyprint'>{name : 'Demo sub-workgroup',description : 'This sub-workgroup.',parentId : 1}</pre><ul><li>Create a workgroup with two children/sub-workgroup.</li></ul><pre class='prettyprint'>{name : 'Demo workgroup with children.',description : 'This sub-workgroup with two children workgroup.',children : [{name : 'Child 1',description : 'Demo sub-workgroup 1.'},{name : 'Child 2',description : 'Demo sub-workgroup 2.'}]}</pre>",
    "operation": "POST",
    "pathParameters": null,
    "queryParameters": null,
    "queryBody": {
      "description": "enterdescriptionhere",
      "name": "thenameoftheworkgroup"
    }
  },
  "delete-workgroup-by-id": {
    "path": "/api/rest/workgroups/{id}",
    "description": "Delete workgroup by id.",
    "operation": "DELETE",
    "pathParameters": [
      {
        "id": 16726,
        "name": "id",
        "description": "ID of the workgroup to be deleted.",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": null
  },
  "find-workgroup-by-id": {
    "path": "/api/rest/workgroups/{id}",
    "description": "Returns information about the workgroup.",
    "operation": "GET",
    "pathParameters": [
      {
        "id": 16723,
        "name": "id",
        "description": "ID of the workgroup to be fetched.",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": [
      {
        "id": 16724,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "get-usage-for-workgroup": {
    "path": "/api/rest/workgroups/usage",
    "description": "Returns counts of messages, medias, and templates using workgroup items specified in parameters.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": [
      {
        "id": 16785,
        "name": "ids",
        "description": "Comma separated list of workgroup's ids for which usage should be calculated.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "list-workgroups": {
    "path": "/api/rest/workgroups/",
    "description": "Returns one or more workgroup's information.",
    "operation": "GET",
    "pathParameters": null,
    "queryParameters": [
      {
        "id": 16761,
        "name": "limit",
        "description": "Limit search result",
        "defaultValue": "10",
        "datatype": "INTEGER"
      },
      {
        "id": 16762,
        "name": "offset",
        "description": "Offset is the first index to perform the search. Use this for paging.",
        "defaultValue": "0",
        "datatype": "INTEGER"
      },
      {
        "id": 16763,
        "name": "sort",
        "description": "Comma separated list of fields to sort by. Use - sign (minus sign) to identify the column should be sort by descending.You can use + sign to indicate ascending sort, but remember you need to URL encode the + sign. To avoid URL encoding issue, just leave out the + sign.",
        "defaultValue": "name",
        "datatype": "STRING"
      },
      {
        "id": 16764,
        "name": "filters",
        "description": "One or more filter can be apply with following comparator:<b>eq</b>, <b>ne</b>, <b>ge</b>, <b>le</b>, <b>gt</b>, <b>lt</b>, <b>in</b> and <b>like</b>.<p><p>",
        "sample": "{'name' : {'values':['test%', '%xmas%'], comparator : 'like'}}",
        "datatype": "STRING"
      },
      {
        "id": 16765,
        "name": "fields",
        "description": "A comma separated list of fields you want to include on the response object.<b>Note:</b> the field <i>id</i> will always be included as a part of the response object.Remember to URL encode your fields.",
        "datatype": "STRING"
      },
      {
        "id": 16766,
        "name": "search",
        "description": "A string that the user wants to search for.The system will search for workgroups with names or descriptions containing that string.",
        "datatype": "STRING"
      }
    ],
    "queryBody": null
  },
  "update-workgroup": {
    "path": "/api/rest/workgroups/{id}",
    "description": "Update workgroup.",
    "operation": "PUT",
    "pathParameters": [
      {
        "id": 16779,
        "name": "id",
        "description": "ID of the workgroup to be updated.",
        "datatype": "INTEGER"
      }
    ],
    "queryParameters": null,
    "queryBody": {
      "description": "enterdescriptionhere",
      "name": "enternameofworkgroup"
    }
  }
}
